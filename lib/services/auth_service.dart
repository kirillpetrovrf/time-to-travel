import 'package:shared_preferences/shared_preferences.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'dart:convert';
import '../models/user.dart' as app_user;
import 'user_service.dart';

class AuthService {
  static const String _lastScreenKey = 'last_screen';
  static const String _formDataPrefix = 'form_data_';
  static const String _userTypeKey = 'user_type';

  // –ù–û–í–û–ï: –ö–ª—é—á–∏ –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  static const String _offlineUserKey = 'offline_user';
  static const String _isOfflineModeKey = 'is_offline_mode';

  static AuthService? _instance;

  static AuthService get instance {
    _instance ??= AuthService._();
    return _instance!;
  }

  AuthService._();

  final FirebaseAuth _firebaseAuth = FirebaseAuth.instance;
  final UserService _userService = UserService();

  // –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞, —Ä–∞–±–æ—Ç–∞–µ–º –ª–∏ –º—ã –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ
  Future<bool> _isOfflineMode() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getBool(_isOfflineModeKey) ??
        true; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º
  }

  // –ù–û–í–û–ï: –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞
  Future<void> _createOfflineUser() async {
    final prefs = await SharedPreferences.getInstance();

    final demoUser = app_user.User(
      id: 'offline_user_demo',
      phone: '+7900000000',
      name: '–î–µ–º–æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      userType: app_user.UserType.client,
      createdAt: DateTime.now(),
    );

    await prefs.setString(_offlineUserKey, jsonEncode(demoUser.toJson()));
    await prefs.setBool(_isOfflineModeKey, true);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  Future<bool> isLoggedIn() async {
    if (await _isOfflineMode()) {
      final prefs = await SharedPreferences.getInstance();
      // –í –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ –≤—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º
      // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      if (!prefs.containsKey(_offlineUserKey)) {
        await _createOfflineUser();
      }
      return true;
    } else {
      final user = _firebaseAuth.currentUser;
      return user != null;
    }
  }

  // –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Firebase
  User? get currentFirebaseUser => _firebaseAuth.currentUser;

  // –û–ë–ù–û–í–õ–ï–ù–ù–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º)
  Future<app_user.User?> getCurrentUser() async {
    if (await _isOfflineMode()) {
      final prefs = await SharedPreferences.getInstance();
      final userJson = prefs.getString(_offlineUserKey);

      if (userJson != null) {
        try {
          final userMap = jsonDecode(userJson) as Map<String, dynamic>;
          return app_user.User.fromJson(userMap);
        } catch (e) {
          print('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ñ—Ñ–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
          await _createOfflineUser();
          return getCurrentUser();
        }
      } else {
        // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        await _createOfflineUser();
        return getCurrentUser();
      }
    } else {
      final firebaseUser = _firebaseAuth.currentUser;
      if (firebaseUser != null) {
        return await _userService.getUserById(firebaseUser.uid);
      }
      return null;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<app_user.UserType?> getUserType() async {
    final prefs = await SharedPreferences.getInstance();
    final userTypeString = prefs.getString(_userTypeKey);
    if (userTypeString != null) {
      return app_user.UserType.values.firstWhere(
        (e) => e.toString() == userTypeString,
        orElse: () => app_user.UserType.client,
      );
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –ø–æ–ª—É—á–∞–µ–º –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    final user = await getCurrentUser();
    return user?.userType ?? app_user.UserType.client;
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  Future<void> setUserType(app_user.UserType userType) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_userTypeKey, userType.toString());
    print('üîß –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userType');
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  Future<void> toggleUserType() async {
    final currentType = await getUserType() ?? app_user.UserType.client;
    final newType = currentType == app_user.UserType.client
        ? app_user.UserType.dispatcher
        : app_user.UserType.client;
    print('üîÑ AuthService: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å $currentType –Ω–∞ $newType');
    await setUserType(newType);
    print('‚úÖ AuthService: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  }

  /// –ù–û–í–û–ï (–¢–ó v3.0): –ü–æ–≤—ã—à–µ–Ω–∏–µ –¥–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —á–µ—Ä–µ–∑ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –≤—Ö–æ–¥
  Future<void> upgradeToDispatcher() async {
    try {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –ª–æ–∫–∞–ª—å–Ω–æ
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString(
        _userTypeKey,
        app_user.UserType.dispatcher.toString(),
      );

      if (await _isOfflineMode()) {
        // –í –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        final currentUser = await getCurrentUser();
        if (currentUser != null) {
          final updatedUser = currentUser.copyWith(
            userType: app_user.UserType.dispatcher,
          );
          await prefs.setString(
            _offlineUserKey,
            jsonEncode(updatedUser.toJson()),
          );
        }
      }

      print('üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–≤—ã—à–µ–Ω –¥–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è –¥–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞: $e');
    }
  }

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  Future<void> logout() async {
    if (await _isOfflineMode()) {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_offlineUserKey);
      await prefs.remove(_userTypeKey);
      return;
    }

    await _firebaseAuth.signOut();
    final prefs = await SharedPreferences.getInstance();
    await prefs.clear(); // –û—á–∏—â–∞–µ–º –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
  Future<void> saveLastScreen(String screenRoute) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_lastScreenKey, screenRoute);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
  Future<String?> getLastScreen() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString(_lastScreenKey);
  }
}
