import 'package:shared_preferences/shared_preferences.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'dart:convert';
import '../models/user.dart' as app_user;
import 'user_service.dart';

class AuthService {
  static const String _lastScreenKey = 'last_screen';
  static const String _formDataPrefix = 'form_data_';
  static const String _userTypeKey = 'user_type';

  static AuthService? _instance;

  static AuthService get instance {
    _instance ??= AuthService._();
    return _instance!;
  }

  AuthService._();

  final FirebaseAuth _firebaseAuth = FirebaseAuth.instance;
  final UserService _userService = UserService();

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  Future<bool> isLoggedIn() async {
    final user = _firebaseAuth.currentUser;
    return user != null;
  }

  // –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Firebase
  User? get currentFirebaseUser => _firebaseAuth.currentUser;

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  Future<app_user.User?> getCurrentUser() async {
    final firebaseUser = _firebaseAuth.currentUser;
    if (firebaseUser != null) {
      return await _userService.getUserById(firebaseUser.uid);
    }
    return null;
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ SMS –∫–æ–¥–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  Future<void> sendVerificationCode({
    required String phoneNumber,
    required Function(String) onCodeSent,
    required Function(String) onError,
  }) async {
    try {
      await _firebaseAuth.verifyPhoneNumber(
        phoneNumber: phoneNumber,
        verificationCompleted: (PhoneAuthCredential credential) async {
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è (Android)
          await _firebaseAuth.signInWithCredential(credential);
        },
        verificationFailed: (FirebaseAuthException e) {
          onError(e.message ?? '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS');
        },
        codeSent: (String verificationId, int? resendToken) {
          onCodeSent(verificationId);
        },
        codeAutoRetrievalTimeout: (String verificationId) {
          // –¢–∞–π–º-–∞—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è
        },
      );
    } catch (e) {
      onError('–û—à–∏–±–∫–∞: $e');
    }
  }

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ SMS –∫–æ–¥–∞ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
  Future<bool> verifyCode({
    required String verificationId,
    required String smsCode,
    required String name,
    required app_user.UserType userType,
  }) async {
    try {
      final credential = PhoneAuthProvider.credential(
        verificationId: verificationId,
        smsCode: smsCode,
      );

      final authResult = await _firebaseAuth.signInWithCredential(credential);
      final firebaseUser = authResult.user;

      if (firebaseUser != null) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ Firestore
        app_user.User? existingUser = await _userService.getUserById(
          firebaseUser.uid,
        );

        if (existingUser == null) {
          // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          final newUser = app_user.User(
            id: firebaseUser.uid,
            phone: firebaseUser.phoneNumber ?? '',
            name: name,
            userType: userType,
            createdAt: DateTime.now(),
          );
          await _userService.createUser(newUser);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª–æ–∫–∞–ª—å–Ω–æ
        final prefs = await SharedPreferences.getInstance();
        await prefs.setString(_userTypeKey, userType.toString());

        return true;
      }
      return false;
    } catch (e) {
      return false;
    }
  }

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  Future<void> logout() async {
    await _firebaseAuth.signOut();
    final prefs = await SharedPreferences.getInstance();
    await prefs.clear(); // –û—á–∏—â–∞–µ–º –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<app_user.UserType?> getUserType() async {
    final prefs = await SharedPreferences.getInstance();
    final userTypeString = prefs.getString(_userTypeKey);
    if (userTypeString != null) {
      return app_user.UserType.values.firstWhere(
        (e) => e.toString() == userTypeString,
        orElse: () => app_user.UserType.client,
      );
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –ø–æ–ª—É—á–∞–µ–º –∏–∑ Firestore
    final user = await getCurrentUser();
    return user?.userType ?? app_user.UserType.client;
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  Future<void> setUserType(app_user.UserType userType) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_userTypeKey, userType.toString());
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  Future<void> toggleUserType() async {
    final currentType = await getUserType() ?? app_user.UserType.client;
    final newType = currentType == app_user.UserType.client
        ? app_user.UserType.dispatcher
        : app_user.UserType.client;
    print('üîÑ AuthService: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å $currentType –Ω–∞ $newType');
    await setUserType(newType);
    print('‚úÖ AuthService: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
  Future<void> saveLastScreen(String screenRoute) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_lastScreenKey, screenRoute);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
  Future<String?> getLastScreen() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString(_lastScreenKey);
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã (–¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π)
  Future<void> saveFormData(String key, Map<String, dynamic> formData) async {
    final prefs = await SharedPreferences.getInstance();
    final jsonString = jsonEncode(formData);
    await prefs.setString('$_formDataPrefix$key', jsonString);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
  Future<Map<String, dynamic>?> getFormData(String key) async {
    final prefs = await SharedPreferences.getInstance();
    final jsonString = prefs.getString('$_formDataPrefix$key');
    if (jsonString != null) {
      try {
        return jsonDecode(jsonString) as Map<String, dynamic>;
      } catch (e) {
        return null;
      }
    }
    return null;
  }

  // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
  Future<void> clearFormData(String key) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove('$_formDataPrefix$key');
  }
}
