import 'package:flutter/foundation.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å VKontakte (–û–ë–ù–û–í–õ–ï–ù –ø–æ–¥ –¢–ó v3.0)
/// –ò–ó–ú–ï–ù–ï–ù–ò–Ø: –°–∫–∏–¥–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ —Å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –Ω–∞ –†–ê–ó–û–í–£–Æ 300‚ÇΩ
class VKService {
  static const VKService _instance = VKService._internal();

  const VKService._internal();

  static const VKService instance = _instance;

  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥ –¢–ó v3.0
  static const String _mockVKAppId = '8112345';
  static const double _oneTimeDiscount =
      300.0; // –ù–û–í–û–ï: —Ä–∞–∑–æ–≤–∞—è —Å–∫–∏–¥–∫–∞ 300‚ÇΩ (–±—ã–ª–æ 30‚ÇΩ)

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK SDK
  Future<bool> initialize() async {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK SDK
      await Future.delayed(const Duration(milliseconds: 500));
      debugPrint('üîµ VK SDK –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return true;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VK SDK: $e');
      return false;
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ VK
  Future<bool> isUserAuthorized() async {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ VK
      await Future.delayed(const Duration(milliseconds: 300));

      // –ú–æ–∫: —Å–ª—É—á–∞–π–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true/false –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      final isAuthorized = DateTime.now().millisecond % 2 == 0;
      debugPrint('üîµ VK –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞: $isAuthorized');
      return isAuthorized;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ VK –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: $e');
      return false;
    }
  }

  /// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ VK
  Future<VKAuthResult> authorize() async {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ VK –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      await Future.delayed(const Duration(seconds: 2));

      // –ú–æ–∫: —Å–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      final mockResult = VKAuthResult(
        isSuccess: true,
        accessToken: 'vk_mock_token_${DateTime.now().millisecondsSinceEpoch}',
        userId: '123456789',
        firstName: '–ò–≤–∞–Ω',
        lastName: '–ü–µ—Ç—Ä–æ–≤',
        photoUrl: 'https://example.com/photo.jpg',
      );

      debugPrint(
        'üîµ VK –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: ${mockResult.firstName} ${mockResult.lastName}',
      );
      return mockResult;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ VK –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: $e');
      return VKAuthResult(isSuccess: false, error: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: $e');
    }
  }

  /// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ VK (–∞–ª–∏–∞—Å –¥–ª—è authorize)
  Future<bool> authenticate() async {
    final result = await authorize();
    return result.isSuccess;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VK (–∞–ª–∏–∞—Å –¥–ª—è getUserInfo)
  Future<VKUserInfo?> getCurrentUser() async {
    return await getUserInfo('mockUserId'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫ ID
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∫–∏–¥–∫–∏ VK (–ù–û–í–û–ï –ø–æ–¥ –¢–ó v3.0)
  Future<bool> isDiscountAvailable(String vkUserId) async {
    try {
      final doc = await FirebaseFirestore.instance
          .collection('vkDiscounts')
          .doc(vkUserId)
          .get();

      // –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç - —Å–∫–∏–¥–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ (–ø–µ—Ä–≤—ã–π —Ä–∞–∑)
      if (!doc.exists) return true;

      // –ï—Å–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ - –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
      final data = doc.data()!;
      return !(data['used'] ?? false);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ VK —Å–∫–∏–¥–∫–∏: $e');
      return false;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  Future<VKUserInfo?> getUserInfo(String accessToken) async {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å API –∑–∞–ø—Ä–æ—Å –∫ VK
      await Future.delayed(const Duration(milliseconds: 800));

      final mockUserInfo = VKUserInfo(
        userId: '123456789',
        firstName: '–ò–≤–∞–Ω',
        lastName: '–ü–µ—Ç—Ä–æ–≤',
        photoUrl: 'https://example.com/photo.jpg',
        isVerified: true,
        profileUrl: 'https://vk.com/id123456789',
      );

      debugPrint(
        'üîµ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ VK –ø–æ–ª—É—á–µ–Ω–∞: ${mockUserInfo.firstName}',
      );
      return mockUserInfo;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ VK: $e');
      return null;
    }
  }

  /// –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç VK
  Future<void> logout() async {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –æ—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ VK
      await Future.delayed(const Duration(milliseconds: 300));
      debugPrint('üîµ VK –≤—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ VK: $e');
    }
  }

  /// –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–æ–≤—É—é —Å–∫–∏–¥–∫—É VK
  Future<bool> canUseOneTimeDiscount(String userId) async {
    try {
      final userDoc = await FirebaseFirestore.instance
          .collection('users')
          .doc(userId)
          .get();

      if (!userDoc.exists) return false;

      final userData = userDoc.data() as Map<String, dynamic>;
      final isVKVerified = userData['isVKVerified'] ?? false;
      final hasUsedVKDiscount = userData['hasUsedVKDiscount'] ?? false;

      // –°–∫–∏–¥–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ò –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª
      return isVKVerified && !hasUsedVKDiscount;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–æ–≤–æ–π —Å–∫–∏–¥–∫–∏ VK: $e');
      return false;
    }
  }

  /// –ù–û–í–û–ï: –û—Ç–º–µ—Ç–∏—Ç—å —Ä–∞–∑–æ–≤—É—é —Å–∫–∏–¥–∫—É VK –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é
  Future<void> markOneTimeDiscountAsUsed(String userId) async {
    try {
      await FirebaseFirestore.instance.collection('users').doc(userId).update({
        'hasUsedVKDiscount': true,
      });

      debugPrint('üîµ –†–∞–∑–æ–≤–∞—è —Å–∫–∏–¥–∫–∞ VK –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∫–∏–¥–∫–∏ VK: $e');
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å —Å–∫–∏–¥–∫—É –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é');
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ä–∞–∑–æ–≤–æ–π —Å–∫–∏–¥–∫–∏ –∑–∞ VK –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é (–û–ë–ù–û–í–õ–ï–ù–û)
  double get oneTimeDiscount => _oneTimeDiscount;

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å–∫–∏–¥–∫–∏ (–û–ë–ù–û–í–õ–ï–ù–û)
  String get discountDescription =>
      '–†–∞–∑–æ–≤–∞—è —Å–∫–∏–¥–∫–∞ –∑–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é VKontakte: ${_oneTimeDiscount.toInt()}‚ÇΩ';

  /// –í–∞–ª–∏–¥–∞—Ü–∏—è VK –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏
  Future<VKValidationResult> validateProfileForDiscount(String vkUserId) async {
    try {
      await Future.delayed(const Duration(milliseconds: 500));

      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∞:
      // - –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–æ–≤—ã–π (—Å–æ–∑–¥–∞–Ω –±–æ–ª–µ–µ –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥)
      // - –ï—Å—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
      // - –ó–∞–ø–æ–ª–Ω–µ–Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      // - –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∑–∞–±–∞–Ω–µ–Ω

      final mockResult = VKValidationResult(
        isValid: true,
        hasPhoto: true,
        accountAge: 365, // –¥–Ω–µ–π
        isVerified: true,
        reason: null,
      );

      debugPrint('üîµ VK –ø—Ä–æ—Ñ–∏–ª—å –≤–∞–ª–∏–¥–µ–Ω –¥–ª—è —Å–∫–∏–¥–∫–∏');
      return mockResult;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ VK –ø—Ä–æ—Ñ–∏–ª—è: $e');
      return VKValidationResult(
        isValid: false,
        hasPhoto: false,
        accountAge: 0,
        isVerified: false,
        reason: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è',
      );
    }
  }

  /// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∏ VK –∫ –∑–∞–∫–∞–∑—É
  Future<double> applyVKDiscount(double originalPrice, String vkUserId) async {
    try {
      final isAvailable = await isDiscountAvailable(vkUserId);
      if (!isAvailable) return originalPrice;

      final validation = await validateProfileForDiscount(vkUserId);
      if (!validation.isValid) return originalPrice;

      final discount = _oneTimeDiscount;
      final newPrice = (originalPrice - discount).clamp(0.0, originalPrice);

      debugPrint(
        'üîµ VK —Å–∫–∏–¥–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞: -$discount ‚ÇΩ (${originalPrice} ‚ÇΩ ‚Üí ${newPrice} ‚ÇΩ)',
      );
      return newPrice;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è VK —Å–∫–∏–¥–∫–∏: $e');
      return originalPrice;
    }
  }
}

/// –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ VK
class VKAuthResult {
  final bool isSuccess;
  final String? accessToken;
  final String? userId;
  final String? firstName;
  final String? lastName;
  final String? photoUrl;
  final String? error;

  VKAuthResult({
    required this.isSuccess,
    this.accessToken,
    this.userId,
    this.firstName,
    this.lastName,
    this.photoUrl,
    this.error,
  });

  @override
  String toString() {
    return 'VKAuthResult(isSuccess: $isSuccess, userId: $userId, error: $error)';
  }
}

/// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ VK
class VKUserInfo {
  final String userId;
  final String firstName;
  final String lastName;
  final String? photoUrl;
  final bool isVerified;
  final String profileUrl;

  VKUserInfo({
    required this.userId,
    required this.firstName,
    required this.lastName,
    this.photoUrl,
    required this.isVerified,
    required this.profileUrl,
  });

  String get fullName => '$firstName $lastName';

  Map<String, dynamic> toJson() {
    return {
      'userId': userId,
      'firstName': firstName,
      'lastName': lastName,
      'photoUrl': photoUrl,
      'isVerified': isVerified,
      'profileUrl': profileUrl,
    };
  }

  factory VKUserInfo.fromJson(Map<String, dynamic> json) {
    return VKUserInfo(
      userId: json['userId'] ?? '',
      firstName: json['firstName'] ?? '',
      lastName: json['lastName'] ?? '',
      photoUrl: json['photoUrl'],
      isVerified: json['isVerified'] ?? false,
      profileUrl: json['profileUrl'] ?? '',
    );
  }

  @override
  String toString() {
    return 'VKUserInfo(userId: $userId, fullName: $fullName, isVerified: $isVerified)';
  }
}

/// –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ VK –ø—Ä–æ—Ñ–∏–ª—è
class VKValidationResult {
  final bool isValid;
  final bool hasPhoto;
  final int accountAge; // –≤ –¥–Ω—è—Ö
  final bool isVerified;
  final String? reason; // –ø—Ä–∏—á–∏–Ω–∞, –µ—Å–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω

  VKValidationResult({
    required this.isValid,
    required this.hasPhoto,
    required this.accountAge,
    required this.isVerified,
    this.reason,
  });

  bool get isEligibleForDiscount {
    return isValid && hasPhoto && accountAge >= 30; // –∞–∫–∫–∞—É–Ω—Ç —Å—Ç–∞—Ä—à–µ –º–µ—Å—è—Ü–∞
  }

  @override
  String toString() {
    return 'VKValidationResult(isValid: $isValid, hasPhoto: $hasPhoto, accountAge: $accountAge, reason: $reason)';
  }
}
