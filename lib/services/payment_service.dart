import 'package:flutter/foundation.dart';
import 'dart:convert';
import 'dart:math';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ (–¢–ó v3.0)
/// –ù–û–í–û–ï: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –°–ë–ü (–°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π)
class PaymentService {
  static const PaymentService _instance = PaymentService._internal();
  const PaymentService._internal();
  static const PaymentService instance = _instance;

  /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –°–ë–ü
  Future<PaymentQRData> generateSBPQRCode({
    required double amount,
    required String bookingId,
    required String description,
  }) async {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API –±–∞–Ω–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR
      await Future.delayed(const Duration(milliseconds: 800));

      final paymentId = _generatePaymentId();

      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è QR-–∫–æ–¥–∞ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç –°–ë–ü)
      final qrData = SBPQRData(
        version: '01',
        initMethod: '12', // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π QR
        merchantAccount: '30570004',
        merchantCategory: '4121', // –¢–∞–∫—Å–∏
        currency: '643', // RUB
        amount: amount.toStringAsFixed(2),
        country: 'RU',
        merchantName: 'TIME TO TRAVEL',
        merchantCity: 'ROSTOV-ON-DON',
        additionalData: {
          'purpose': description,
          'paymentId': paymentId,
          'bookingId': bookingId,
        },
      );

      return PaymentQRData(
        qrContent: qrData.toString(),
        paymentId: paymentId,
        amount: amount,
        expiresAt: DateTime.now().add(const Duration(minutes: 15)),
        sbpData: qrData,
      );
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –°–ë–ü: $e');
      rethrow;
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
  Future<PaymentStatus> checkPaymentStatus(String paymentId) async {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API –±–∞–Ω–∫–∞
      await Future.delayed(const Duration(milliseconds: 500));

      // –ú–æ–∫: —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –¥–µ–º–æ
      final random = Random();
      final statuses = [
        PaymentStatus.pending,
        PaymentStatus.completed,
        PaymentStatus.failed,
      ];

      return statuses[random.nextInt(statuses.length)];
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: $e');
      return PaymentStatus.failed;
    }
  }

  /// –û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞
  Future<bool> cancelPayment(String paymentId) async {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –æ—Ç–º–µ–Ω–∞ —á–µ—Ä–µ–∑ API –±–∞–Ω–∫–∞
      await Future.delayed(const Duration(milliseconds: 300));

      debugPrint('üí≥ –ü–ª–∞—Ç–µ–∂ $paymentId –æ—Ç–º–µ–Ω–µ–Ω');
      return true;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞: $e');
      return false;
    }
  }

  String _generatePaymentId() {
    final timestamp = DateTime.now().millisecondsSinceEpoch;
    final random = Random().nextInt(9999);
    return 'TT_${timestamp}_$random';
  }
}

/// –°—Ç–∞—Ç—É—Å—ã –ø–ª–∞—Ç–µ–∂–∞
enum PaymentStatus {
  pending, // –í –æ–∂–∏–¥–∞–Ω–∏–∏
  completed, // –í—ã–ø–æ–ª–Ω–µ–Ω
  failed, // –ù–µ —É–¥–∞–ª—Å—è
  cancelled, // –û—Ç–º–µ–Ω–µ–Ω
}

/// –î–∞–Ω–Ω—ã–µ QR-–∫–æ–¥–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
class PaymentQRData {
  final String qrContent;
  final String paymentId;
  final double amount;
  final DateTime expiresAt;
  final SBPQRData sbpData;

  const PaymentQRData({
    required this.qrContent,
    required this.paymentId,
    required this.amount,
    required this.expiresAt,
    required this.sbpData,
  });

  bool get isExpired => DateTime.now().isAfter(expiresAt);
}

/// –î–∞–Ω–Ω—ã–µ –°–ë–ü QR-–∫–æ–¥–∞
class SBPQRData {
  final String version;
  final String initMethod;
  final String merchantAccount;
  final String merchantCategory;
  final String currency;
  final String amount;
  final String country;
  final String merchantName;
  final String merchantCity;
  final Map<String, String> additionalData;

  const SBPQRData({
    required this.version,
    required this.initMethod,
    required this.merchantAccount,
    required this.merchantCategory,
    required this.currency,
    required this.amount,
    required this.country,
    required this.merchantName,
    required this.merchantCity,
    required this.additionalData,
  });

  @override
  String toString() {
    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –¥–µ–º–æ
    return 'SBP|$merchantName|$amount|$currency|${additionalData['paymentId']}';
  }

  Map<String, dynamic> toJson() {
    return {
      'version': version,
      'initMethod': initMethod,
      'merchantAccount': merchantAccount,
      'merchantCategory': merchantCategory,
      'currency': currency,
      'amount': amount,
      'country': country,
      'merchantName': merchantName,
      'merchantCity': merchantCity,
      'additionalData': additionalData,
    };
  }
}
