import 'dart:convert';
import 'package:http/http.dart' as http;
import '../config/api_keys.dart';
import '../models/route_info.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Yandex Maps API
class YandexMapsService {
  static final YandexMapsService instance = YandexMapsService._();
  YandexMapsService._();

  String get _apiKey => ApiKeys.yandexMapsApiKey;

  /// –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ: –∞–¥—Ä–µ—Å ‚Üí –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
  Future<Coordinates?> geocode(String address) async {
    print('üó∫Ô∏è [YANDEX] –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞: "$address"');

    try {
      final url = Uri.parse(
        'https://geocode-maps.yandex.ru/1.x/?'
        'apikey=$_apiKey&'
        'geocode=${Uri.encodeComponent(address)}&'
        'format=json',
      );

      final response = await http.get(url);

      if (response.statusCode == 200) {
        final json = jsonDecode(response.body);
        final coords = Coordinates.fromYandexJson(json);
        print('‚úÖ [YANDEX] –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã: $coords');
        return coords;
      } else {
        print('‚ùå [YANDEX] –û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: ${response.statusCode}');
        return null;
      }
    } catch (e) {
      print('‚ùå [YANDEX] –û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: $e');
      return null;
    }
  }

  /// –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
  Future<RouteInfo?> calculateRoute(
    String fromAddress,
    String toAddress,
  ) async {
    print('üöó [YANDEX] ========== –†–ê–°–ß–Å–¢ –ú–ê–†–®–†–£–¢–ê ==========');
    print('üöó [YANDEX] –û—Ç: $fromAddress');
    print('üöó [YANDEX] –î–æ: $toAddress');

    try {
      // –®–∞–≥ 1: –ì–µ–æ–∫–æ–¥–∏—Ä—É–µ–º –æ–±–∞ –∞–¥—Ä–µ—Å–∞
      final fromCoords = await geocode(fromAddress);
      final toCoords = await geocode(toAddress);

      if (fromCoords == null || toCoords == null) {
        print('‚ùå [YANDEX] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã');
        return null;
      }

      // –®–∞–≥ 2: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç
      final url = Uri.parse(
        'https://api.routing.yandex.net/v2/route?'
        'apikey=$_apiKey&'
        'waypoints=${fromCoords.longitude},${fromCoords.latitude}|${toCoords.longitude},${toCoords.latitude}&'
        'mode=driving',
      );

      print('üöó [YANDEX] –ó–∞–ø—Ä–æ—Å –º–∞—Ä—à—Ä—É—Ç–∞...');
      final response = await http.get(url);

      if (response.statusCode == 200) {
        final json = jsonDecode(response.body);

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—Ä–µ–º—è
        final route = json['route'];
        final distanceMeters = route['distance']['value'] as int;
        final durationSeconds = route['duration']['value'] as int;

        final distanceKm = distanceMeters / 1000;
        final durationMinutes = durationSeconds / 60;

        final routeInfo = RouteInfo(
          distance: distanceKm,
          duration: durationMinutes,
          fromAddress: fromAddress,
          toAddress: toAddress,
        );

        print('‚úÖ [YANDEX] –ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω: $routeInfo');
        print('üöó [YANDEX] =========================================');
        return routeInfo;
      } else {
        print('‚ùå [YANDEX] –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞: ${response.statusCode}');
        print('‚ùå [YANDEX] –û—Ç–≤–µ—Ç: ${response.body}');
        return null;
      }
    } catch (e) {
      print('‚ùå [YANDEX] –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞: $e');
      return null;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∞–¥—Ä–µ—Å–æ–≤ (–∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ)
  Future<List<String>> getSuggestions(String query) async {
    if (query.length < 3) {
      return []; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    }

    print('üí° [YANDEX] –ü–æ–∏—Å–∫ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –¥–ª—è: "$query"');

    try {
      final url = Uri.parse(
        'https://suggest-maps.yandex.ru/v1/suggest?'
        'apikey=$_apiKey&'
        'text=${Uri.encodeComponent(query)}&'
        'types=locality,street,house',
      );

      final response = await http.get(url);

      if (response.statusCode == 200) {
        final json = jsonDecode(response.body);
        final results = json['results'] as List;

        final suggestions = results
            .map((r) => r['title']['text'] as String)
            .toList();

        print('‚úÖ [YANDEX] –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫: ${suggestions.length}');
        return suggestions;
      } else {
        print('‚ùå [YANDEX] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫: ${response.statusCode}');
        return [];
      }
    } catch (e) {
      print('‚ùå [YANDEX] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫: $e');
      return [];
    }
  }
}
