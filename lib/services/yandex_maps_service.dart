import 'dart:convert';
import 'dart:math';
import 'package:http/http.dart' as http;
import '../config/api_keys.dart';
import '../models/route_info.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Yandex Maps API
class YandexMapsService {
  static final YandexMapsService instance = YandexMapsService._();
  YandexMapsService._();

  String get _apiKey => ApiKeys.yandexMapsApiKey;

  /// –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
  /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ true –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API
  static const bool _useTestMode = true;

  /// –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ: –∞–¥—Ä–µ—Å ‚Üí –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
  Future<Coordinates?> geocode(String address) async {
    print('üó∫Ô∏è [YANDEX] –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞: "$address"');

    // –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    if (_useTestMode) {
      print('üß™ [YANDEX] –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã');
      await Future.delayed(
        const Duration(milliseconds: 500),
      ); // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏

      // –ü—Ä–æ—Å—Ç–∞—è –º–æ–∫-–ª–æ–≥–∏–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
      final lowerAddress = address.toLowerCase();
      if (lowerAddress.contains('–ø–µ—Ä–º—å') || lowerAddress.contains('perm')) {
        return Coordinates(latitude: 58.0, longitude: 56.3);
      } else if (lowerAddress.contains('–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥') ||
          lowerAddress.contains('yekaterinburg')) {
        return Coordinates(latitude: 56.8, longitude: 60.6);
      } else if (lowerAddress.contains('–º–æ—Å–∫–≤–∞') ||
          lowerAddress.contains('moscow')) {
        return Coordinates(latitude: 55.75, longitude: 37.62);
      } else if (lowerAddress.contains('—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥') ||
          lowerAddress.contains('petersburg')) {
        return Coordinates(latitude: 59.93, longitude: 30.36);
      } else if (lowerAddress.contains('–¥–æ–Ω–µ—Ü–∫') ||
          lowerAddress.contains('donetsk')) {
        return Coordinates(latitude: 48.0, longitude: 37.8);
      } else if (lowerAddress.contains('—Ä–æ—Å—Ç–æ–≤') ||
          lowerAddress.contains('rostov')) {
        return Coordinates(latitude: 47.2, longitude: 39.7);
      }

      // –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ - —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –†–æ—Å—Å–∏–∏
      print('‚ö†Ô∏è [YANDEX] –ê–¥—Ä–µ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã');
      return Coordinates(latitude: 55.0, longitude: 37.0);
    }

    try {
      final url = Uri.parse(
        'https://geocode-maps.yandex.ru/1.x/?'
        'apikey=$_apiKey&'
        'geocode=${Uri.encodeComponent(address)}&'
        'format=json',
      );

      final response = await http.get(url);

      if (response.statusCode == 200) {
        final json = jsonDecode(response.body);
        final coords = Coordinates.fromYandexJson(json);
        print('‚úÖ [YANDEX] –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã: $coords');
        return coords;
      } else {
        print('‚ùå [YANDEX] –û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: ${response.statusCode}');
        return null;
      }
    } catch (e) {
      print('‚ùå [YANDEX] –û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: $e');
      return null;
    }
  }

  /// –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
  Future<RouteInfo?> calculateRoute(
    String fromAddress,
    String toAddress,
  ) async {
    print('üöó [YANDEX] ========== –†–ê–°–ß–Å–¢ –ú–ê–†–®–†–£–¢–ê ==========');
    print('üöó [YANDEX] –û—Ç: $fromAddress');
    print('üöó [YANDEX] –î–æ: $toAddress');

    try {
      // –®–∞–≥ 1: –ì–µ–æ–∫–æ–¥–∏—Ä—É–µ–º –æ–±–∞ –∞–¥—Ä–µ—Å–∞
      final fromCoords = await geocode(fromAddress);
      final toCoords = await geocode(toAddress);

      if (fromCoords == null || toCoords == null) {
        print('‚ùå [YANDEX] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã');
        return null;
      }

      // –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ì–∞–≤–µ—Ä—Å–∏–Ω–∞
      if (_useTestMode) {
        print('üß™ [YANDEX] –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: —Ä–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º');
        final distance = _calculateDistance(fromCoords, toCoords);
        final duration = distance / 80 * 60; // –ü—Ä–∏–º–µ—Ä–Ω–æ 80 –∫–º/—á

        print('‚úÖ [YANDEX] –ú–∞—Ä—à—Ä—É—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω (—Ç–µ—Å—Ç–æ–≤—ã–π):');
        print('   üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${distance.toStringAsFixed(1)} –∫–º');
        print('   ‚è±Ô∏è –í—Ä–µ–º—è: ${duration.toInt()} –º–∏–Ω—É—Ç');

        return RouteInfo(
          distance: distance,
          duration: duration,
          fromAddress: fromAddress,
          toAddress: toAddress,
        );
      }

      // –®–∞–≥ 2: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–π API
      final url = Uri.parse(
        'https://api.routing.yandex.net/v2/route?'
        'apikey=$_apiKey&'
        'waypoints=${fromCoords.longitude},${fromCoords.latitude}|${toCoords.longitude},${toCoords.latitude}&'
        'mode=driving',
      );

      print('üöó [YANDEX] –ó–∞–ø—Ä–æ—Å –º–∞—Ä—à—Ä—É—Ç–∞...');
      final response = await http.get(url);

      if (response.statusCode == 200) {
        final json = jsonDecode(response.body);

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—Ä–µ–º—è
        final route = json['route'];
        final distanceMeters = route['distance']['value'] as int;
        final durationSeconds = route['duration']['value'] as int;

        final distanceKm = distanceMeters / 1000;
        final durationMinutes = durationSeconds / 60;

        final routeInfo = RouteInfo(
          distance: distanceKm,
          duration: durationMinutes,
          fromAddress: fromAddress,
          toAddress: toAddress,
        );

        print('‚úÖ [YANDEX] –ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω: $routeInfo');
        print('üöó [YANDEX] =========================================');
        return routeInfo;
      } else {
        print('‚ùå [YANDEX] –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞: ${response.statusCode}');
        print('‚ùå [YANDEX] –û—Ç–≤–µ—Ç: ${response.body}');
        return null;
      }
    } catch (e) {
      print('‚ùå [YANDEX] –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞: $e');
      return null;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∞–¥—Ä–µ—Å–æ–≤ (–∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ)
  Future<List<String>> getSuggestions(String query) async {
    if (query.length < 3) {
      return []; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    }

    print('üí° [YANDEX] –ü–æ–∏—Å–∫ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –¥–ª—è: "$query"');

    try {
      final url = Uri.parse(
        'https://suggest-maps.yandex.ru/v1/suggest?'
        'apikey=$_apiKey&'
        'text=${Uri.encodeComponent(query)}&'
        'types=locality,street,house',
      );

      final response = await http.get(url);

      if (response.statusCode == 200) {
        final json = jsonDecode(response.body);
        final results = json['results'] as List;

        final suggestions = results
            .map((r) => r['title']['text'] as String)
            .toList();

        print('‚úÖ [YANDEX] –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫: ${suggestions.length}');
        return suggestions;
      } else {
        print('‚ùå [YANDEX] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫: ${response.statusCode}');
        return [];
      }
    } catch (e) {
      print('‚ùå [YANDEX] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫: $e');
      return [];
    }
  }

  /// –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ì–∞–≤–µ—Ä—Å–∏–Ω–∞
  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
  double _calculateDistance(Coordinates from, Coordinates to) {
    const earthRadiusKm = 6371.0;

    final lat1Rad = from.latitude * pi / 180;
    final lat2Rad = to.latitude * pi / 180;
    final dLatRad = (to.latitude - from.latitude) * pi / 180;
    final dLonRad = (to.longitude - from.longitude) * pi / 180;

    final a =
        sin(dLatRad / 2) * sin(dLatRad / 2) +
        cos(lat1Rad) * cos(lat2Rad) * sin(dLonRad / 2) * sin(dLonRad / 2);

    final c = 2 * atan2(sqrt(a), sqrt(1 - a));

    return earthRadiusKm * c;
  }
}
