import 'package:flutter/foundation.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';
import '../models/booking.dart';
import 'auth_service.dart';
import 'notification_service.dart';

/// ‚ö†Ô∏è –í–ê–ñ–ù–û: –°–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ SQLite/SharedPreferences
/// TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Firebase - —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –ø–æ–∑–∂–µ
class BookingService {
  static final BookingService _instance = BookingService._internal();
  factory BookingService() => _instance;
  BookingService._internal();

  // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Firebase - —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –ø–æ–∑–∂–µ
  // final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  // final String _collection = 'bookings';

  // –ö–ª—é—á–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
  static const String _offlineBookingsKey = 'offline_bookings';

  /// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ª–æ–∫–∞–ª—å–Ω–æ)
  /// TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Firebase - —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –ø–æ–∑–∂–µ
  Future<String> createBooking(Booking booking) async {
    debugPrint('‚ÑπÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ (Firebase –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω)');
    return _createOfflineBooking(booking);
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  Future<String> _createOfflineBooking(Booking booking) async {
    final prefs = await SharedPreferences.getInstance();

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
    final bookingId = 'offline_${DateTime.now().millisecondsSinceEpoch}';

    // –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å ID
    final bookingWithId = Booking(
      id: bookingId,
      clientId: booking.clientId,
      tripType: booking.tripType,
      direction: booking.direction,
      departureDate: booking.departureDate,
      departureTime: booking.departureTime,
      passengerCount: booking.passengerCount,
      pickupPoint: booking.pickupPoint,
      pickupAddress: booking.pickupAddress,
      dropoffAddress: booking.dropoffAddress,
      fromStop: booking.fromStop,
      toStop: booking.toStop,
      totalPrice: booking.totalPrice,
      status: booking.status,
      createdAt: booking.createdAt,
      trackingPoints: booking.trackingPoints,
      baggage: booking.baggage,
      pets: booking.pets,
      passengers: booking.passengers,
    );

    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    final existingBookingsJson = prefs.getString(_offlineBookingsKey);
    List<Map<String, dynamic>> bookingsList = [];

    if (existingBookingsJson != null) {
      final decoded = jsonDecode(existingBookingsJson) as List<dynamic>;
      bookingsList = decoded.cast<Map<String, dynamic>>();
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    final bookingJson = bookingWithId.toJson();
    print('üíæ JSON –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${jsonEncode(bookingJson)}');
    print('üíæ –ë–∞–≥–∞–∂ –≤ JSON: ${bookingJson['baggage']}');
    bookingsList.add(bookingJson);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    await prefs.setString(_offlineBookingsKey, jsonEncode(bookingsList));

    print('üì± –°–æ–∑–¥–∞–Ω–æ –æ—Ñ—Ñ–ª–∞–π–Ω –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: $bookingId');

    // üîî –ü–õ–ê–ù–ò–†–£–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –°–†–ê–ó–£ –ü–û–°–õ–ï –°–û–ó–î–ê–ù–ò–Ø –ó–ê–ö–ê–ó–ê
    debugPrint('üîî ========================================');
    debugPrint('üîî –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –î–õ–Ø –ó–ê–ö–ê–ó–ê');
    debugPrint('üîî ID –∑–∞–∫–∞–∑–∞: $bookingId');
    debugPrint('üîî –î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏: ${bookingWithId.departureDate}');
    debugPrint('üîî –í—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏: ${bookingWithId.departureTime}');
    debugPrint('üîî ========================================');

    final notificationService = NotificationService.instance;
    final notificationsScheduled = await notificationService
        .scheduleAllBookingNotifications(bookingWithId);

    if (notificationsScheduled) {
      debugPrint('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ $bookingId');
    } else {
      debugPrint(
        '‚ö†Ô∏è –ù–µ –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—ã–ª–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ $bookingId',
      );
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    final pending = await notificationService.getPendingNotifications();
    debugPrint(
      'üìã –í—Å–µ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ: ${pending.length}',
    );
    for (final notification in pending) {
      debugPrint(
        '   - ID: ${notification.id}, Title: ${notification.title}, Payload: ${notification.payload}',
      );
    }

    return bookingId;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ ID (–ª–æ–∫–∞–ª—å–Ω–æ)
  /// TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Firebase - —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –ø–æ–∑–∂–µ
  Future<Booking?> getBookingById(String bookingId) async {
    debugPrint('‚ÑπÔ∏è –ü–æ–∏—Å–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ ID –ª–æ–∫–∞–ª—å–Ω–æ (Firebase –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω)');
    return _getOfflineBookingById(bookingId);
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ ID
  Future<Booking?> _getOfflineBookingById(String bookingId) async {
    final prefs = await SharedPreferences.getInstance();
    final bookingsJson = prefs.getString(_offlineBookingsKey);

    if (bookingsJson != null) {
      final bookingsList = jsonDecode(bookingsJson) as List<dynamic>;

      for (final bookingData in bookingsList) {
        final booking = Booking.fromJson(bookingData as Map<String, dynamic>);
        if (booking.id == bookingId) {
          return booking;
        }
      }
    }
    return null;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
  Future<List<Booking>> getCurrentClientBookings() async {
    // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ AuthService
    final currentUserId = await AuthService.instance.getCurrentUserId();

    if (currentUserId == null || currentUserId.isEmpty) {
      debugPrint('‚ö†Ô∏è ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return [];
    }

    debugPrint('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $currentUserId');
    return getClientBookings(currentUserId);
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞ (–ª–æ–∫–∞–ª—å–Ω–æ)
  /// TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Firebase - —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –ø–æ–∑–∂–µ
  Future<List<Booking>> getClientBookings(String clientId) async {
    debugPrint(
      '‚ÑπÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ (Firebase –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω)',
    );
    return _getOfflineClientBookings(clientId);
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞
  Future<List<Booking>> _getOfflineClientBookings(String clientId) async {
    final prefs = await SharedPreferences.getInstance();
    final bookingsJson = prefs.getString(_offlineBookingsKey);

    if (bookingsJson == null) return [];

    final bookingsList = jsonDecode(bookingsJson) as List<dynamic>;
    final clientBookings = <Booking>[];

    for (final bookingData in bookingsList) {
      final booking = Booking.fromJson(bookingData as Map<String, dynamic>);
      if (booking.clientId == clientId) {
        clientBookings.add(booking);
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (—Å–∞–º—ã–µ –Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    clientBookings.sort((a, b) => b.createdAt.compareTo(a.createdAt));

    return clientBookings;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π (–ª–æ–∫–∞–ª—å–Ω–æ)
  /// TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Firebase - —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –ø–æ–∑–∂–µ
  Future<List<Booking>> getActiveBookings() async {
    debugPrint(
      '‚ÑπÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ª–æ–∫–∞–ª—å–Ω–æ (Firebase –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω)',
    );
    return _getOfflineActiveBookings();
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
  Future<List<Booking>> _getOfflineActiveBookings() async {
    final prefs = await SharedPreferences.getInstance();
    final bookingsJson = prefs.getString(_offlineBookingsKey);

    if (bookingsJson == null) return [];

    final bookingsList = jsonDecode(bookingsJson) as List<dynamic>;
    final activeBookings = <Booking>[];

    for (final bookingData in bookingsList) {
      final booking = Booking.fromJson(bookingData as Map<String, dynamic>);

      // –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
      if ([
        BookingStatus.pending,
        BookingStatus.confirmed,
        BookingStatus.assigned,
        BookingStatus.inProgress,
      ].contains(booking.status)) {
        activeBookings.add(booking);
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    activeBookings.sort((a, b) => a.departureDate.compareTo(b.departureDate));

    return activeBookings;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ –¥–∞—Ç–µ (–ª–æ–∫–∞–ª—å–Ω–æ)
  /// TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Firebase - —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –ø–æ–∑–∂–µ
  Future<List<Booking>> getBookingsByDate(DateTime date) async {
    debugPrint(
      '‚ÑπÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ –¥–∞—Ç–µ –ª–æ–∫–∞–ª—å–Ω–æ (Firebase –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω)',
    );
    // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Firebase
    return [];
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ª–æ–∫–∞–ª—å–Ω–æ)
  /// TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Firebase - —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –ø–æ–∑–∂–µ
  Future<void> updateBookingStatus(
    String bookingId,
    BookingStatus status,
  ) async {
    debugPrint(
      '‚ÑπÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ (Firebase –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω)',
    );
    // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ Firebase
  }

  /// –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–ª–æ–∫–∞–ª—å–Ω–æ)
  /// TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Firebase - —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –ø–æ–∑–∂–µ
  Future<void> assignVehicle(String bookingId, String vehicleId) async {
    debugPrint('‚ÑπÔ∏è –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ (Firebase –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω)');
    // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ Firebase
  }

  /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è (–ª–æ–∫–∞–ª—å–Ω–æ)
  /// TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Firebase - —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –ø–æ–∑–∂–µ
  Future<void> addTrackingPoint(String bookingId, TrackingPoint point) async {
    debugPrint(
      '‚ÑπÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ (Firebase –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω)',
    );
    // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ Firebase
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ª–æ–∫–∞–ª—å–Ω–æ)
  /// TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Firebase - —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –ø–æ–∑–∂–µ
  Future<void> updateBooking(Booking booking) async {
    debugPrint('‚ÑπÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ (Firebase –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω)');
    // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ Firebase
  }

  /// –û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ª–æ–∫–∞–ª—å–Ω–æ)
  /// TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Firebase - —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –ø–æ–∑–∂–µ
  Future<void> cancelBooking(String bookingId, [String? reason]) async {
    debugPrint('‚ÑπÔ∏è –û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ (Firebase –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω)');
    await _cancelOfflineBooking(bookingId, reason);
  }

  /// –ù–û–í–û–ï: –û—Ç–º–µ–Ω–∞ –æ—Ñ—Ñ–ª–∞–π–Ω –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  Future<void> _cancelOfflineBooking(String bookingId, [String? reason]) async {
    final prefs = await SharedPreferences.getInstance();
    final bookingsJson = prefs.getString(_offlineBookingsKey);

    if (bookingsJson != null) {
      final bookingsList = jsonDecode(bookingsJson) as List<dynamic>;

      // –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      for (int i = 0; i < bookingsList.length; i++) {
        final bookingData = bookingsList[i] as Map<String, dynamic>;
        if (bookingData['id'] == bookingId) {
          bookingData['status'] = BookingStatus.cancelled.toString();
          bookingData['updatedAt'] = DateTime.now().toIso8601String();
          if (reason != null) {
            bookingData['notes'] = reason;
          }
          break;
        }
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
      await prefs.setString(_offlineBookingsKey, jsonEncode(bookingsList));
      print('üì± –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ $bookingId –æ—Ç–º–µ–Ω–µ–Ω–æ –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ');
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º (–ª–æ–∫–∞–ª—å–Ω–æ)
  /// TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Firebase - —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –ø–æ–∑–∂–µ
  Future<Map<String, int>> getBookingStats() async {
    debugPrint(
      '‚ÑπÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ª–æ–∫–∞–ª—å–Ω–æ (Firebase –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω)',
    );
    // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Firebase
    final stats = <String, int>{};
    for (final status in BookingStatus.values) {
      stats[status.toString()] = 0;
    }
    return stats;
  }
}
