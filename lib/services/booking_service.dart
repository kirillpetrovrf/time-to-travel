import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';
import '../models/booking.dart';

class BookingService {
  static final BookingService _instance = BookingService._internal();
  factory BookingService() => _instance;
  BookingService._internal();

  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final String _collection = 'bookings';

  // –ù–û–í–û–ï: –ö–ª—é—á–∏ –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–µ–Ω–∏—è
  static const String _offlineBookingsKey = 'offline_bookings';
  static const String _isOfflineModeKey = 'is_offline_mode';

  // –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞
  Future<bool> _isOfflineMode() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getBool(_isOfflineModeKey) ?? true;
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞)
  Future<String> createBooking(Booking booking) async {
    if (await _isOfflineMode()) {
      return _createOfflineBooking(booking);
    } else {
      final docRef = await _firestore
          .collection(_collection)
          .add(booking.toJson());
      return docRef.id;
    }
  }

  /// –ù–û–í–û–ï: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ñ—Ñ–ª–∞–π–Ω –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  Future<String> _createOfflineBooking(Booking booking) async {
    final prefs = await SharedPreferences.getInstance();

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
    final bookingId = 'offline_${DateTime.now().millisecondsSinceEpoch}';

    // –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å ID
    final bookingWithId = Booking(
      id: bookingId,
      clientId: booking.clientId,
      tripType: booking.tripType,
      direction: booking.direction,
      departureDate: booking.departureDate,
      departureTime: booking.departureTime,
      passengerCount: booking.passengerCount,
      pickupPoint: booking.pickupPoint,
      pickupAddress: booking.pickupAddress,
      dropoffAddress: booking.dropoffAddress,
      fromStop: booking.fromStop,
      toStop: booking.toStop,
      totalPrice: booking.totalPrice,
      status: booking.status,
      createdAt: booking.createdAt,
      trackingPoints: booking.trackingPoints,
      baggage: booking.baggage,
      pets: booking.pets,
      passengers: booking.passengers,
    );

    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    final existingBookingsJson = prefs.getString(_offlineBookingsKey);
    List<Map<String, dynamic>> bookingsList = [];

    if (existingBookingsJson != null) {
      final decoded = jsonDecode(existingBookingsJson) as List<dynamic>;
      bookingsList = decoded.cast<Map<String, dynamic>>();
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    bookingsList.add(bookingWithId.toJson());

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    await prefs.setString(_offlineBookingsKey, jsonEncode(bookingsList));

    print('üì± –°–æ–∑–¥–∞–Ω–æ –æ—Ñ—Ñ–ª–∞–π–Ω –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: $bookingId');
    return bookingId;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ ID (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞)
  Future<Booking?> getBookingById(String bookingId) async {
    if (await _isOfflineMode()) {
      return _getOfflineBookingById(bookingId);
    } else {
      final doc = await _firestore.collection(_collection).doc(bookingId).get();

      if (doc.exists && doc.data() != null) {
        final data = doc.data()!;
        data['id'] = doc.id;
        return Booking.fromJson(data);
      }
      return null;
    }
  }

  /// –ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ñ—Ñ–ª–∞–π–Ω –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ ID
  Future<Booking?> _getOfflineBookingById(String bookingId) async {
    final prefs = await SharedPreferences.getInstance();
    final bookingsJson = prefs.getString(_offlineBookingsKey);

    if (bookingsJson != null) {
      final bookingsList = jsonDecode(bookingsJson) as List<dynamic>;

      for (final bookingData in bookingsList) {
        final booking = Booking.fromJson(bookingData as Map<String, dynamic>);
        if (booking.id == bookingId) {
          return booking;
        }
      }
    }
    return null;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞ (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞)
  Future<List<Booking>> getClientBookings(String clientId) async {
    if (await _isOfflineMode()) {
      return _getOfflineClientBookings(clientId);
    } else {
      final query = await _firestore
          .collection(_collection)
          .where('clientId', isEqualTo: clientId)
          .orderBy('createdAt', descending: true)
          .get();

      return query.docs.map((doc) {
        final data = doc.data();
        data['id'] = doc.id;
        return Booking.fromJson(data);
      }).toList();
    }
  }

  /// –ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ñ—Ñ–ª–∞–π–Ω –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞
  Future<List<Booking>> _getOfflineClientBookings(String clientId) async {
    final prefs = await SharedPreferences.getInstance();
    final bookingsJson = prefs.getString(_offlineBookingsKey);

    if (bookingsJson == null) return [];

    final bookingsList = jsonDecode(bookingsJson) as List<dynamic>;
    final clientBookings = <Booking>[];

    for (final bookingData in bookingsList) {
      final booking = Booking.fromJson(bookingData as Map<String, dynamic>);
      if (booking.clientId == clientId) {
        clientBookings.add(booking);
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (—Å–∞–º—ã–µ –Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    clientBookings.sort((a, b) => b.createdAt.compareTo(a.createdAt));

    return clientBookings;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞)
  Future<List<Booking>> getActiveBookings() async {
    if (await _isOfflineMode()) {
      return _getOfflineActiveBookings();
    } else {
      final query = await _firestore
          .collection(_collection)
          .where(
            'status',
            whereIn: [
              BookingStatus.pending.toString(),
              BookingStatus.confirmed.toString(),
              BookingStatus.assigned.toString(),
              BookingStatus.inProgress.toString(),
            ],
          )
          .orderBy('departureDate')
          .get();

      return query.docs.map((doc) {
        final data = doc.data();
        data['id'] = doc.id;
        return Booking.fromJson(data);
      }).toList();
    }
  }

  /// –ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ñ—Ñ–ª–∞–π–Ω –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
  Future<List<Booking>> _getOfflineActiveBookings() async {
    final prefs = await SharedPreferences.getInstance();
    final bookingsJson = prefs.getString(_offlineBookingsKey);

    if (bookingsJson == null) return [];

    final bookingsList = jsonDecode(bookingsJson) as List<dynamic>;
    final activeBookings = <Booking>[];

    for (final bookingData in bookingsList) {
      final booking = Booking.fromJson(bookingData as Map<String, dynamic>);

      // –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
      if ([
        BookingStatus.pending,
        BookingStatus.confirmed,
        BookingStatus.assigned,
        BookingStatus.inProgress,
      ].contains(booking.status)) {
        activeBookings.add(booking);
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    activeBookings.sort((a, b) => a.departureDate.compareTo(b.departureDate));

    return activeBookings;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ –¥–∞—Ç–µ
  Future<List<Booking>> getBookingsByDate(DateTime date) async {
    final startOfDay = DateTime(date.year, date.month, date.day);
    final endOfDay = DateTime(date.year, date.month, date.day, 23, 59, 59);

    final query = await _firestore
        .collection(_collection)
        .where(
          'departureDate',
          isGreaterThanOrEqualTo: startOfDay.toIso8601String(),
        )
        .where('departureDate', isLessThanOrEqualTo: endOfDay.toIso8601String())
        .orderBy('departureDate')
        .get();

    return query.docs.map((doc) {
      final data = doc.data();
      data['id'] = doc.id;
      return Booking.fromJson(data);
    }).toList();
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  Future<void> updateBookingStatus(
    String bookingId,
    BookingStatus status,
  ) async {
    await _firestore.collection(_collection).doc(bookingId).update({
      'status': status.toString(),
    });
  }

  /// –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
  Future<void> assignVehicle(String bookingId, String vehicleId) async {
    await _firestore.collection(_collection).doc(bookingId).update({
      'assignedVehicleId': vehicleId,
      'status': BookingStatus.assigned.toString(),
    });
  }

  /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
  Future<void> addTrackingPoint(String bookingId, TrackingPoint point) async {
    await _firestore.collection(_collection).doc(bookingId).update({
      'trackingPoints': FieldValue.arrayUnion([point.toJson()]),
    });
  }

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  Future<void> updateBooking(Booking booking) async {
    final data = booking.toJson();
    data.remove('id'); // –£–¥–∞–ª—è–µ–º ID –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    await _firestore.collection(_collection).doc(booking.id).update(data);
  }

  /// –û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞)
  Future<void> cancelBooking(String bookingId, [String? reason]) async {
    if (await _isOfflineMode()) {
      await _cancelOfflineBooking(bookingId, reason);
    } else {
      final updateData = {'status': BookingStatus.cancelled.toString()};
      if (reason != null) {
        updateData['notes'] = reason;
      }
      await _firestore
          .collection(_collection)
          .doc(bookingId)
          .update(updateData);
    }
  }

  /// –ù–û–í–û–ï: –û—Ç–º–µ–Ω–∞ –æ—Ñ—Ñ–ª–∞–π–Ω –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  Future<void> _cancelOfflineBooking(String bookingId, [String? reason]) async {
    final prefs = await SharedPreferences.getInstance();
    final bookingsJson = prefs.getString(_offlineBookingsKey);

    if (bookingsJson != null) {
      final bookingsList = jsonDecode(bookingsJson) as List<dynamic>;

      // –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      for (int i = 0; i < bookingsList.length; i++) {
        final bookingData = bookingsList[i] as Map<String, dynamic>;
        if (bookingData['id'] == bookingId) {
          bookingData['status'] = BookingStatus.cancelled.toString();
          bookingData['updatedAt'] = DateTime.now().toIso8601String();
          if (reason != null) {
            bookingData['notes'] = reason;
          }
          break;
        }
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
      await prefs.setString(_offlineBookingsKey, jsonEncode(bookingsList));
      print('üì± –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ $bookingId –æ—Ç–º–µ–Ω–µ–Ω–æ –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ');
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º
  Future<Map<String, int>> getBookingStats() async {
    final allBookings = await _firestore.collection(_collection).get();

    final stats = <String, int>{};
    for (final status in BookingStatus.values) {
      stats[status.toString()] = 0;
    }

    for (final doc in allBookings.docs) {
      final data = doc.data();
      final status = data['status'] as String;
      stats[status] = (stats[status] ?? 0) + 1;
    }

    return stats;
  }
}
