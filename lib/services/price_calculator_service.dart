import '../models/calculator_settings.dart';
import '../models/price_calculation.dart';
import 'calculator_settings_service.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–µ–∑–¥–∫–∏
class PriceCalculatorService {
  static final PriceCalculatorService instance = PriceCalculatorService._();
  PriceCalculatorService._();

  final CalculatorSettingsService _settingsService =
      CalculatorSettingsService.instance;

  /// –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
  Future<PriceCalculation> calculatePrice(double distanceKm) async {
    print('üí∞ [PRICE] ========== –†–ê–°–ß–Å–¢ –°–¢–û–ò–ú–û–°–¢–ò ==========');
    print('üí∞ [PRICE] –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${distanceKm.toStringAsFixed(2)} –∫–º');

    final settings = await _settingsService.getSettings();
    print(
      'üí∞ [PRICE] –ù–∞—Å—Ç—Ä–æ–π–∫–∏: base=${settings.baseCost}‚ÇΩ, perKm=${settings.costPerKm}‚ÇΩ, min=${settings.minPrice}‚ÇΩ',
    );

    // –§–æ—Ä–º—É–ª–∞: –±–∞–∑–æ–≤–∞—è + (–∫–º √ó –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç)
    double rawPrice = settings.baseCost + (distanceKm * settings.costPerKm);
    print('üí∞ [PRICE] –°—ã—Ä–∞—è —Ü–µ–Ω–∞: ${rawPrice.toStringAsFixed(2)}‚ÇΩ');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
    if (rawPrice < settings.minPrice) {
      print(
        'üí∞ [PRICE] ‚ö†Ô∏è –¶–µ–Ω–∞ –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞! –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é: ${settings.minPrice}‚ÇΩ',
      );
      return PriceCalculation(
        rawPrice: rawPrice,
        finalPrice: settings.minPrice,
        distance: distanceKm,
        baseCost: settings.baseCost,
        costPerKm: settings.costPerKm,
        roundedUp: false,
        appliedMinPrice: true,
      );
    }

    // –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ —Ç—ã—Å—è—á –≤–≤–µ—Ä—Ö (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
    double finalPrice = rawPrice;
    bool roundedUp = false;

    if (settings.roundToThousands && rawPrice > settings.minPrice) {
      finalPrice = (rawPrice / 1000).ceil() * 1000;
      roundedUp = rawPrice != finalPrice;

      if (roundedUp) {
        print(
          'üí∞ [PRICE] üîº –û–∫—Ä—É–≥–ª–µ–Ω–æ –¥–æ —Ç—ã—Å—è—á: ${rawPrice.toStringAsFixed(0)}‚ÇΩ ‚Üí ${finalPrice.toStringAsFixed(0)}‚ÇΩ',
        );
      }
    }

    final calculation = PriceCalculation(
      rawPrice: rawPrice,
      finalPrice: finalPrice,
      distance: distanceKm,
      baseCost: settings.baseCost,
      costPerKm: settings.costPerKm,
      roundedUp: roundedUp,
      appliedMinPrice: false,
    );

    print(
      'üí∞ [PRICE] ========== –ò–¢–û–ì–û: ${finalPrice.toStringAsFixed(0)}‚ÇΩ ==========',
    );
    return calculation;
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ä–∞—Å—á—ë—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
  Future<Map<int, double>> getExamples() async {
    final distances = [10, 50, 100, 150, 200];
    final Map<int, double> examples = {};

    for (final distance in distances) {
      final calculation = await calculatePrice(distance.toDouble());
      examples[distance] = calculation.finalPrice;
    }

    return examples;
  }
}
