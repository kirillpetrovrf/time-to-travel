import 'package:flutter/cupertino.dart';
import '../../../models/baggage.dart';
import '../../../services/baggage_pricing_service.dart';
import '../../../theme/theme_manager.dart';
import '../../../theme/app_theme.dart';

/// –≠–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ –±–∞–≥–∞–∂–∞ (–ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–î–ï–õ–ê–ù –ø–æ–¥ –¢–ó v3.0)
/// –ù–û–í–´–ï –ü–†–ê–í–ò–õ–ê v9.0: –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –±–∞–≥–∞–∂–∏ –Ω–∞ –∫–∞–∂–¥–æ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞:
/// - S –±–∞–≥–∞–∂: 2 –±–µ—Å–ø–ª–∞—Ç–Ω–æ –Ω–∞ –∫–∞–∂–¥–æ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞
/// - M –±–∞–≥–∞–∂: 1 –±–µ—Å–ø–ª–∞—Ç–Ω–æ –Ω–∞ –∫–∞–∂–¥–æ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞
/// - L –±–∞–≥–∞–∂: 1 –±–µ—Å–ø–ª–∞—Ç–Ω–æ –Ω–∞ –∫–∞–∂–¥–æ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞
/// –ü—Ä–∏ —Å–º–µ—à–∏–≤–∞–Ω–∏–∏ S —Å M/L: –í–°–ï S –ø–ª–∞—Ç–Ω—ã–µ, M/L –æ—Å—Ç–∞—é—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏ –ø–æ —Ñ–æ—Ä–º—É–ª–µ
class BaggageSelectionScreen extends StatefulWidget {
  final List<BaggageItem> initialBaggage;
  final Function(List<BaggageItem>) onBaggageSelected;
  final int
  passengerCount; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –±–∞–≥–∞–∂–µ–π

  const BaggageSelectionScreen({
    super.key,
    this.initialBaggage = const [],
    required this.onBaggageSelected,
    required this.passengerCount,
  });

  @override
  State<BaggageSelectionScreen> createState() => _BaggageSelectionScreenState();
}

class _BaggageSelectionScreenState extends State<BaggageSelectionScreen> {
  late Map<BaggageSize, int>
  _quantities; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –±–∞–≥–∞–∂–∞ (0-10)
  Map<BaggageSize, double> _prices = {}; // –¶–µ–Ω—ã –æ—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
  bool _isLoading = true;

  // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –¥–ª—è custom –±–∞–≥–∞–∂–∞
  final TextEditingController _customDescriptionController =
      TextEditingController();
  final TextEditingController _customDimensionsController =
      TextEditingController();

  @override
  void initState() {
    super.initState();
    _initializeQuantities();
    _loadPrices();
  }

  void _initializeQuantities() {
    print('üß≥ [–ë–ê–ì–ê–ñ] ============ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ì–ê–ñ–ê ============');
    print('üß≥ [–ë–ê–ì–ê–ñ] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤: ${widget.passengerCount}');
    print(
      'üß≥ [–ë–ê–ì–ê–ñ] –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö S –±–∞–≥–∞–∂–µ–π: ${widget.passengerCount * 2} (${widget.passengerCount} √ó 2)',
    );
    print(
      'üß≥ [–ë–ê–ì–ê–ñ] –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö M –±–∞–≥–∞–∂–µ–π: ${widget.passengerCount * 1} (${widget.passengerCount} √ó 1)',
    );
    print(
      'üß≥ [–ë–ê–ì–ê–ñ] –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö L –±–∞–≥–∞–∂–µ–π: ${widget.passengerCount * 1} (${widget.passengerCount} √ó 1)',
    );
    print(
      'üß≥ [–ë–ê–ì–ê–ñ] –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–≥–∞–∂: ${widget.initialBaggage.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤',
    );

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–∞–≥–∞–∂–∞ –∏–ª–∏ –Ω—É–ª—è–º–∏
    _quantities = {
      BaggageSize.s: 0,
      BaggageSize.m: 0,
      BaggageSize.l: 0,
      BaggageSize.custom: 0,
    };

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–∑ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    for (final item in widget.initialBaggage) {
      _quantities[item.size] = item.quantity;
      print(
        'üß≥ [–ë–ê–ì–ê–ñ] –ó–∞–≥—Ä—É–∂–µ–Ω ${item.size.name.toUpperCase()}: ${item.quantity} —à—Ç, —Ü–µ–Ω–∞: ${item.pricePerExtraItem}‚ÇΩ/—à—Ç',
      );
      if (item.size == BaggageSize.custom) {
        _customDescriptionController.text = item.customDescription ?? '';
        _customDimensionsController.text = item.customDimensions ?? '';
      }
    }

    print(
      'üß≥ [–ë–ê–ì–ê–ñ] –ò—Ç–æ–≥–æ–≤—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: S=${_quantities[BaggageSize.s]}, M=${_quantities[BaggageSize.m]}, L=${_quantities[BaggageSize.l]}, Custom=${_quantities[BaggageSize.custom]}',
    );
  }

  Future<void> _loadPrices() async {
    print('üí∞ [–ë–ê–ì–ê–ñ] –ó–∞–≥—Ä—É–∑–∫–∞ —Ü–µ–Ω –±–∞–≥–∞–∂–∞...');
    try {
      final prices = await BaggagePricingService.getExtraBaggagePrices();
      print('üí∞ [–ë–ê–ì–ê–ñ] –¶–µ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ:');
      print('üí∞ [–ë–ê–ì–ê–ñ]   S: ${prices[BaggageSize.s]}‚ÇΩ/—à—Ç');
      print('üí∞ [–ë–ê–ì–ê–ñ]   M: ${prices[BaggageSize.m]}‚ÇΩ/—à—Ç');
      print('üí∞ [–ë–ê–ì–ê–ñ]   L: ${prices[BaggageSize.l]}‚ÇΩ/—à—Ç');
      print('üí∞ [–ë–ê–ì–ê–ñ]   Custom: ${prices[BaggageSize.custom]}‚ÇΩ/—à—Ç');
      if (mounted) {
        setState(() {
          _prices = prices;
          _isLoading = false;
        });
      }
    } catch (e) {
      print('‚ùå [–ë–ê–ì–ê–ñ] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–Ω: $e');
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  @override
  void dispose() {
    _customDescriptionController.dispose();
    _customDimensionsController.dispose();
    super.dispose();
  }

  void _updateQuantity(BaggageSize size, int newQuantity) {
    if (newQuantity >= 0 && newQuantity <= 10) {
      final oldQuantity = _quantities[size] ?? 0;
      print(
        '‚ûï‚ûñ [–ë–ê–ì–ê–ñ] –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ ${size.name.toUpperCase()}: $oldQuantity ‚Üí $newQuantity',
      );
      setState(() {
        _quantities[size] = newQuantity;
      });
      print(
        'üìä [–ë–ê–ì–ê–ñ] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: S=${_quantities[BaggageSize.s]}, M=${_quantities[BaggageSize.m]}, L=${_quantities[BaggageSize.l]}, Custom=${_quantities[BaggageSize.custom]}',
      );
      print(
        'üìä [–ë–ê–ì–ê–ñ] –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${_getTotalBaggageCount()} –ø—Ä–µ–¥–º–µ—Ç–æ–≤',
      );
      print(
        'üíµ [–ë–ê–ì–ê–ñ] –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${_calculateTotalCost().toStringAsFixed(0)}‚ÇΩ',
      );
    }
  }

  int _getTotalBaggageCount() {
    return _quantities.values.fold(0, (sum, quantity) => sum + quantity);
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –±–∞–≥–∞–∂–µ–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (–¥–ª—è UI)
  int _getFreeBaggageCount(BaggageSize size) {
    final quantity = _quantities[size] ?? 0;
    if (quantity == 0) return 0;

    final sCount = _quantities[BaggageSize.s] ?? 0;
    final mCount = _quantities[BaggageSize.m] ?? 0;
    final lCount = _quantities[BaggageSize.l] ?? 0;

    // –ù–û–í–ê–Ø –£–ü–†–û–©–Å–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê v13.0: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∞–ª–≥–æ—Ä–∏—Ç–º —á—Ç–æ –∏ –≤ _calculateTotalCost
    int availablePassengers = widget.passengerCount;
    int remainingS = sCount;
    int remainingM = mCount;
    int remainingL = lCount;

    // –®–∞–≥ 1: –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º L (–ø–æ 1 –Ω–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–∞)
    if (remainingL > 0) {
      int passengersWithL = remainingL <= availablePassengers
          ? remainingL
          : availablePassengers;
      availablePassengers -= passengersWithL;
      remainingL -= passengersWithL;
    }

    // –®–∞–≥ 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º M (–ø–æ 1 –Ω–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–∞)
    if (remainingM > 0 && availablePassengers > 0) {
      int passengersWithM = remainingM <= availablePassengers
          ? remainingM
          : availablePassengers;
      availablePassengers -= passengersWithM;
      remainingM -= passengersWithM;
    }

    // –®–∞–≥ 3: –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º S - –õ–Æ–ë–û–ï –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ –ª–∏–º–∏—Ç–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ
    if (remainingS > 0 && availablePassengers > 0) {
      int maxFreeS = availablePassengers * 2; // –ö–∞–∂–¥–æ–º—É –æ—Å—Ç–∞–≤—à–µ–º—É—Å—è –ø–∞—Å—Å–∞–∂–∏—Ä—É - 2 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö S
      int freeS = remainingS <= maxFreeS ? remainingS : maxFreeS;
      remainingS -= freeS;
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    if (size == BaggageSize.s) {
      return sCount - remainingS; // –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö S
    } else if (size == BaggageSize.m) {
      return mCount - remainingM; // –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö M
    } else if (size == BaggageSize.l) {
      return lCount - remainingL; // –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö L
    } else if (size == BaggageSize.custom) {
      return 0; // Custom –≤—Å–µ–≥–¥–∞ –ø–ª–∞—Ç–Ω–æ
    }

    return 0;
  }

  double _calculateTotalCost() {
    print('üíµ [–ë–ê–ì–ê–ñ] ========== –†–ê–°–ß–ï–¢ –°–¢–û–ò–ú–û–°–¢–ò v12.0 ==========');
    print('üíµ [–ë–ê–ì–ê–ñ] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤: ${widget.passengerCount}');

    int totalBaggageCount = _getTotalBaggageCount();
    print('üíµ [–ë–ê–ì–ê–ñ] –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–≥–∞–∂–∞: $totalBaggageCount –ø—Ä–µ–¥–º–µ—Ç–æ–≤');

    if (totalBaggageCount == 0) {
      print('üíµ [–ë–ê–ì–ê–ñ] –ë–∞–≥–∞–∂ –Ω–µ –≤—ã–±—Ä–∞–Ω, —Å—Ç–æ–∏–º–æ—Å—Ç—å: 0‚ÇΩ');
      return 0.0;
    }

    final sCount = _quantities[BaggageSize.s] ?? 0;
    final mCount = _quantities[BaggageSize.m] ?? 0;
    final lCount = _quantities[BaggageSize.l] ?? 0;
    final customCount = _quantities[BaggageSize.custom] ?? 0;

    final sPrice = _prices[BaggageSize.s] ?? 500.0;
    final mPrice = _prices[BaggageSize.m] ?? 1000.0;
    final lPrice = _prices[BaggageSize.l] ?? 2000.0;
    final customPrice = _prices[BaggageSize.custom] ?? 0.0;

    print(
      'üíµ [–ë–ê–ì–ê–ñ] –°–æ—Å—Ç–∞–≤: S=$sCount, M=$mCount, L=$lCount, Custom=$customCount',
    );

    // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê v12.0: –ö–∞–∂–¥—ã–π –ø–∞—Å—Å–∞–∂–∏—Ä –≤—ã–±–∏—Ä–∞–µ—Ç –û–î–ò–ù –≤–∞—Ä–∏–∞–Ω—Ç: 2S –ò–õ–ò 1M –ò–õ–ò 1L
    // –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:
    // 1. –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º L (–ø–æ 1 –Ω–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–∞)
    // 2. –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º M (–ø–æ 1 –Ω–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–∞)
    // 3. –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º S (–ø–æ 2 –Ω–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–∞)
    // 4. –û—Å—Ç–∞—Ç–æ–∫ —Å—á–∏—Ç–∞–µ–º –ø–ª–∞—Ç–Ω—ã–º

    int availablePassengers = widget.passengerCount;
    int remainingS = sCount;
    int remainingM = mCount;
    int remainingL = lCount;

    print('üíµ [–ë–ê–ì–ê–ñ] --- –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ë–ê–ì–ê–ñ–ê –ü–û –ü–ê–°–°–ê–ñ–ò–†–ê–ú ---');

    // –®–∞–≥ 1: –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º L (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - —Å–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π)
    int passengersWithL = 0;
    if (remainingL > 0) {
      passengersWithL = remainingL <= availablePassengers
          ? remainingL
          : availablePassengers;
      availablePassengers -= passengersWithL;
      remainingL -= passengersWithL;
      print('üíµ [–ë–ê–ì–ê–ñ] $passengersWithL –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –≤—ã–±—Ä–∞–ª–∏ 1√óL (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)');
    }

    // –®–∞–≥ 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º M
    int passengersWithM = 0;
    if (remainingM > 0 && availablePassengers > 0) {
      passengersWithM = remainingM <= availablePassengers
          ? remainingM
          : availablePassengers;
      availablePassengers -= passengersWithM;
      remainingM -= passengersWithM;
      print('üíµ [–ë–ê–ì–ê–ñ] $passengersWithM –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –≤—ã–±—Ä–∞–ª–∏ 1√óM (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)');
    }

    // –®–∞–≥ 3: –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º S - –õ–Æ–ë–û–ï –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ –ª–∏–º–∏—Ç–∞ (availablePassengers √ó 2)
    int freeS = 0;
    if (remainingS > 0 && availablePassengers > 0) {
      int maxFreeS = availablePassengers * 2; // –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö S
      freeS = remainingS <= maxFreeS ? remainingS : maxFreeS;
      
      // –°—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ S
      int usedPassengers = (freeS / 2).ceil(); // –û–∫—Ä—É–≥–ª—è–µ–º –≤–≤–µ—Ä—Ö
      
      remainingS -= freeS;
      print(
        'üíµ [–ë–ê–ì–ê–ñ] –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö S: $freeS —à—Ç (–ª–∏–º–∏—Ç: $maxFreeS), –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ $usedPassengers –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤',
      );
      availablePassengers -= usedPassengers;
    }

    print('üíµ [–ë–ê–ì–ê–ñ] –ù–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤: $availablePassengers');
    print(
      'üíµ [–ë–ê–ì–ê–ñ] –û—Å—Ç–∞—Ç–æ–∫ –ø–ª–∞—Ç–Ω–æ–≥–æ –±–∞–≥–∞–∂–∞: S=$remainingS, M=$remainingM, L=$remainingL',
    );

    // –®–∞–≥ 4: –°—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–ª–∞—Ç–Ω–æ–≥–æ –±–∞–≥–∞–∂–∞
    double total = 0.0;

    if (remainingS > 0) {
      double cost = remainingS * sPrice;
      total += cost;
      print(
        'üíµ [–ë–ê–ì–ê–ñ] –ü–ª–∞—Ç–Ω—ã–µ S: $remainingS √ó ${sPrice.toStringAsFixed(0)}‚ÇΩ = ${cost.toStringAsFixed(0)}‚ÇΩ',
      );
    }

    if (remainingM > 0) {
      double cost = remainingM * mPrice;
      total += cost;
      print(
        'üíµ [–ë–ê–ì–ê–ñ] –ü–ª–∞—Ç–Ω—ã–µ M: $remainingM √ó ${mPrice.toStringAsFixed(0)}‚ÇΩ = ${cost.toStringAsFixed(0)}‚ÇΩ',
      );
    }

    if (remainingL > 0) {
      double cost = remainingL * lPrice;
      total += cost;
      print(
        'üíµ [–ë–ê–ì–ê–ñ] –ü–ª–∞—Ç–Ω—ã–µ L: $remainingL √ó ${lPrice.toStringAsFixed(0)}‚ÇΩ = ${cost.toStringAsFixed(0)}‚ÇΩ',
      );
    }

    // Custom –≤—Å–µ–≥–¥–∞ –ø–ª–∞—Ç–Ω–æ
    if (customCount > 0) {
      double cost = customCount * customPrice;
      total += cost;
      print(
        'üíµ [–ë–ê–ì–ê–ñ] Custom: $customCount √ó ${customPrice.toStringAsFixed(0)}‚ÇΩ = ${cost.toStringAsFixed(0)}‚ÇΩ',
      );
    }

    print(
      'üíµ [–ë–ê–ì–ê–ñ] ========== –ò–¢–û–ì–û: ${total.toStringAsFixed(0)}‚ÇΩ ==========',
    );

    return total;
  }

  List<BaggageItem> _buildBaggageList() {
    final List<BaggageItem> result = [];

    for (final size in BaggageSize.values) {
      final quantity = _quantities[size] ?? 0;
      if (quantity > 0) {
        final pricePerExtra = _prices[size] ?? 0.0;
        result.add(
          BaggageItem(
            size: size,
            quantity: quantity,
            customDescription: size == BaggageSize.custom
                ? _customDescriptionController.text
                : null,
            customDimensions: size == BaggageSize.custom
                ? _customDimensionsController.text
                : null,
            pricePerExtraItem: pricePerExtra,
          ),
        );
      }
    }

    return result;
  }

  void _showCustomBaggageDialog() {
    final themeManager = context.themeManager;
    final theme = themeManager.currentTheme;

    showCupertinoDialog(
      context: context,
      builder: (context) => CupertinoAlertDialog(
        title: const Text('–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –±–∞–≥–∞–∂'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const SizedBox(height: 8),
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ü–µ–Ω–µ
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: CupertinoColors.systemYellow.withOpacity(0.15),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Row(
                children: [
                  const Icon(
                    CupertinoIcons.info_circle_fill,
                    color: CupertinoColors.systemOrange,
                    size: 20,
                  ),
                  const SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      '–¶–µ–Ω–∞ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞',
                      style: TextStyle(
                        fontSize: 12,
                        color: theme.secondaryLabel,
                      ),
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 16),
            CupertinoTextField(
              controller: _customDescriptionController,
              placeholder: '–ß—Ç–æ –≤–µ–∑–µ—Ç–µ? (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)',
              maxLines: 2,
            ),
            const SizedBox(height: 12),
            CupertinoTextField(
              controller: _customDimensionsController,
              placeholder: '–ì–∞–±–∞—Ä–∏—Ç—ã (–î√ó–®√ó–í —Å–º)',
            ),
          ],
        ),
        actions: [
          CupertinoDialogAction(
            child: const Text('–û—Ç–º–µ–Ω–∞'),
            onPressed: () => Navigator.pop(context),
          ),
          CupertinoDialogAction(
            child: const Text('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'),
            onPressed: () {
              Navigator.pop(context);
              setState(() {});
            },
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final themeManager = context.themeManager;
    final theme = themeManager.currentTheme;

    if (_isLoading) {
      return CupertinoPageScaffold(
        backgroundColor: theme.systemBackground,
        navigationBar: CupertinoNavigationBar(
          backgroundColor: theme.secondarySystemBackground,
          middle: Text('–í—ã–±–æ—Ä –±–∞–≥–∞–∂–∞', style: TextStyle(color: theme.label)),
        ),
        child: const Center(child: CupertinoActivityIndicator()),
      );
    }

    return CupertinoPageScaffold(
      backgroundColor: theme.systemBackground,
      navigationBar: CupertinoNavigationBar(
        backgroundColor: theme.secondarySystemBackground,
        middle: Text('–í—ã–±–æ—Ä –±–∞–≥–∞–∂–∞', style: TextStyle(color: theme.label)),
        leading: CupertinoButton(
          padding: EdgeInsets.zero,
          child: Text('–û—Ç–º–µ–Ω–∞', style: TextStyle(color: theme.quaternaryLabel)),
          onPressed: () => Navigator.of(context).pop(),
        ),
        trailing: CupertinoButton(
          padding: EdgeInsets.zero,
          child: Text(
            '–ì–æ—Ç–æ–≤–æ',
            style: TextStyle(color: CupertinoColors.activeBlue),
          ),
          onPressed: () {
            final baggageList = _buildBaggageList();
            print('');
            print('‚úÖ [–ë–ê–ì–ê–ñ] ========== –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –í–´–ë–û–†–ê ==========');
            print('‚úÖ [–ë–ê–ì–ê–ñ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ì–æ—Ç–æ–≤–æ"');
            print('‚úÖ [–ë–ê–ì–ê–ñ] –í—ã–±—Ä–∞–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: ${_getTotalBaggageCount()}');
            for (var item in baggageList) {
              print(
                '‚úÖ [–ë–ê–ì–ê–ñ]   ‚Ä¢ ${item.size.name.toUpperCase()}: ${item.quantity} —à—Ç, —Ü–µ–Ω–∞ –∑–∞ –¥–æ–ø: ${item.pricePerExtraItem.toStringAsFixed(0)}‚ÇΩ',
              );
            }
            print(
              '‚úÖ [–ë–ê–ì–ê–ñ] –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${_calculateTotalCost().toStringAsFixed(0)}‚ÇΩ',
            );
            print('‚úÖ [–ë–ê–ì–ê–ñ] ==========================================');
            print('');
            widget.onBaggageSelected(baggageList);
            Navigator.of(context).pop();
          },
        ),
      ),
      child: SafeArea(
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (–ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –Ω–∞—á–∞–ª–æ)
              _buildTotalCostCard(theme),

              const SizedBox(height: 24),

              // –ö–∞—Ä—Ç–æ—á–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –±–∞–≥–∞–∂–∞
              ..._buildBaggageCards(theme),
            ],
          ),
        ),
      ),
    );
  }

  List<Widget> _buildBaggageCards(CustomTheme theme) {
    final List<Widget> cards = [];

    for (final size in [
      BaggageSize.s,
      BaggageSize.m,
      BaggageSize.l,
      BaggageSize.custom,
    ]) {
      cards.add(_buildBaggageCard(size, theme));
      cards.add(const SizedBox(height: 16));
    }

    return cards;
  }

  Widget _buildBaggageCard(BaggageSize size, CustomTheme theme) {
    final quantity = _quantities[size] ?? 0;
    final pricePerExtra = _prices[size] ?? 0.0;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –±–∞–≥–∞–∂–µ–π –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    int freeCount = _getFreeBaggageCount(size);
    int paidCount = quantity - freeCount;

    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: theme.secondarySystemBackground,
        borderRadius: BorderRadius.circular(12),
        border: quantity > 0
            ? Border.all(color: CupertinoColors.activeBlue, width: 2)
            : null,
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              // –ò–∫–æ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
              Container(
                width: 50,
                height: 50,
                decoration: BoxDecoration(
                  color: _getSizeColor(size),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Icon(
                  _getSizeIcon(size),
                  color: CupertinoColors.white,
                  size: 24,
                ),
              ),

              const SizedBox(width: 12),

              // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–º–µ—Ä–µ
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      _getSizeTitle(size),
                      style: TextStyle(
                        color: theme.label,
                        fontSize: 16,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                    Text(
                      _getSizeDimensions(size),
                      style: TextStyle(
                        color: theme.secondaryLabel,
                        fontSize: 14,
                      ),
                    ),
                    Text(
                      _getSizeExamples(size),
                      style: TextStyle(
                        color: theme.secondaryLabel,
                        fontSize: 12,
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),

          const SizedBox(height: 16),

          // –¶–µ–Ω–∞ –∏ —Å—Ç–∞—Ç—É—Å
          Row(
            children: [
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    if (quantity == 0)
                      Text(
                        '–ù–µ –≤—ã–±—Ä–∞–Ω–æ',
                        style: TextStyle(
                          color: theme.placeholderText,
                          fontSize: 14,
                        ),
                      )
                    // –î–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ (custom) –±–∞–≥–∞–∂–∞ - –æ—Å–æ–±–∞—è –ª–æ–≥–∏–∫–∞
                    else if (size == BaggageSize.custom)
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            '–¶–µ–Ω–∞ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º',
                            style: TextStyle(
                              color: CupertinoColors.systemOrange,
                              fontSize: 14,
                              fontWeight: FontWeight.w600,
                            ),
                          ),
                          const SizedBox(height: 4),
                          Text(
                            '–ü–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä',
                            style: TextStyle(
                              color: theme.secondaryLabel,
                              fontSize: 12,
                            ),
                          ),
                        ],
                      )
                    // –í—Å–µ –±–∞–≥–∞–∂–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ (S –±–∞–≥–∞–∂–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 2-—Ö)
                    else if (freeCount > 0 && paidCount == 0)
                      Text(
                        freeCount == 1
                            ? '–ë–ï–°–ü–õ–ê–¢–ù–û'
                            : '–ë–ï–°–ü–õ–ê–¢–ù–û (${freeCount} —à—Ç)',
                        style: TextStyle(
                          color: CupertinoColors.activeGreen,
                          fontSize: 14,
                          fontWeight: FontWeight.bold,
                        ),
                      )
                    // –ï—Å—Ç—å –∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ, –∏ –ø–ª–∞—Ç–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö S + 3 –ø–ª–∞—Ç–Ω—ã—Ö S)
                    else if (freeCount > 0 && paidCount > 0)
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            '–ë–ï–°–ü–õ–ê–¢–ù–û (${freeCount}) + ${paidCount} –¥–æ–ø.',
                            style: TextStyle(
                              color: theme.label,
                              fontSize: 14,
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                          if (pricePerExtra > 0)
                            Text(
                              '–î–æ–ø. –±–∞–≥–∞–∂: ${(paidCount * pricePerExtra).toStringAsFixed(0)}‚ÇΩ',
                              style: TextStyle(
                                color: theme.secondaryLabel,
                                fontSize: 12,
                              ),
                            ),
                        ],
                      )
                    // –í—Å–µ –±–∞–≥–∞–∂–∏ –ø–ª–∞—Ç–Ω—ã–µ (–Ω–µ S, –∏–ª–∏ S –±–æ–ª—å—à–µ 2-—Ö)
                    else
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            '${pricePerExtra.toStringAsFixed(0)}‚ÇΩ',
                            style: TextStyle(
                              color: theme.label,
                              fontSize: 14,
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                          if (quantity > 1)
                            Text(
                              '–í—Å–µ–≥–æ: ${(quantity * pricePerExtra).toStringAsFixed(0)}‚ÇΩ',
                              style: TextStyle(
                                color: theme.secondaryLabel,
                                fontSize: 12,
                              ),
                            ),
                        ],
                      ),
                  ],
                ),
              ),

              // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
              Row(
                children: [
                  CupertinoButton(
                    padding: EdgeInsets.zero,
                    onPressed: quantity > 0
                        ? () => _updateQuantity(size, quantity - 1)
                        : null,
                    child: Container(
                      width: 32,
                      height: 32,
                      decoration: BoxDecoration(
                        color: quantity > 0
                            ? CupertinoColors.systemRed
                            : theme.quaternaryLabel,
                        borderRadius: BorderRadius.circular(16),
                      ),
                      child: const Icon(
                        CupertinoIcons.minus,
                        color: CupertinoColors.white,
                        size: 18,
                      ),
                    ),
                  ),

                  Container(
                    width: 40,
                    child: Text(
                      quantity.toString(),
                      style: TextStyle(
                        color: theme.label,
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ),

                  CupertinoButton(
                    padding: EdgeInsets.zero,
                    onPressed: quantity < 10
                        ? () {
                            if (size == BaggageSize.custom && quantity == 0) {
                              _showCustomBaggageDialog();
                            }
                            _updateQuantity(size, quantity + 1);
                          }
                        : null,
                    child: Container(
                      width: 32,
                      height: 32,
                      decoration: BoxDecoration(
                        color: quantity < 10
                            ? CupertinoColors.activeBlue
                            : theme.quaternaryLabel,
                        borderRadius: BorderRadius.circular(16),
                      ),
                      child: const Icon(
                        CupertinoIcons.plus,
                        color: CupertinoColors.white,
                        size: 18,
                      ),
                    ),
                  ),
                ],
              ),
            ],
          ),

          // –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è custom –±–∞–≥–∞–∂–∞
          if (size == BaggageSize.custom && quantity > 0) ...[
            const SizedBox(height: 12),
            CupertinoButton(
              padding: EdgeInsets.zero,
              onPressed: _showCustomBaggageDialog,
              child: Container(
                width: double.infinity,
                padding: const EdgeInsets.symmetric(vertical: 8),
                decoration: BoxDecoration(
                  color: theme.tertiarySystemBackground,
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Text(
                  '–£–∫–∞–∑–∞—Ç—å –≥–∞–±–∞—Ä–∏—Ç—ã –∏ –æ–ø–∏—Å–∞–Ω–∏–µ',
                  style: TextStyle(
                    color: CupertinoColors.activeBlue,
                    fontSize: 14,
                  ),
                  textAlign: TextAlign.center,
                ),
              ),
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildTotalCostCard(CustomTheme theme) {
    final totalCost = _calculateTotalCost();
    final hasFreeBaggage = _quantities.values.any((q) => q > 0);

    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: theme.secondarySystemBackground,
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        children: [
          // –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±–∞–≥–∞–∂
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±–∞–≥–∞–∂:',
                style: TextStyle(color: theme.label, fontSize: 16),
              ),
              Text(
                hasFreeBaggage ? '–í–∫–ª—é—á–µ–Ω' : '–ù–µ –≤—ã–±—Ä–∞–Ω',
                style: TextStyle(
                  color: hasFreeBaggage
                      ? CupertinoColors.activeGreen
                      : theme.placeholderText,
                  fontSize: 16,
                  fontWeight: FontWeight.w500,
                ),
              ),
            ],
          ),

          // –ü—Ä–∞–≤–∏–ª–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –±–∞–≥–∞–∂–∞
          const SizedBox(height: 8),
          Text(
            '–¢–æ–ª—å–∫–æ –Ω–∞ 1 –ø–∞—Å—Å–∞–∂–∏—Ä–∞ : S : 2 –∏–ª–∏ M / L : 1',
            style: TextStyle(color: theme.secondaryLabel, fontSize: 14),
            textAlign: TextAlign.center,
          ),

          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–∞–≥–∞–∂ (–µ—Å–ª–∏ –µ—Å—Ç—å)
          if (totalCost > 0) ...[
            const SizedBox(height: 12),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–∞–≥–∞–∂:',
                  style: TextStyle(color: theme.label, fontSize: 16),
                ),
                Text(
                  '${totalCost.toStringAsFixed(0)}‚ÇΩ',
                  style: TextStyle(
                    color: theme.label,
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
          ],
        ],
      ),
    );
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–∑–º–µ—Ä–∞—Ö
  String _getSizeTitle(BaggageSize size) {
    switch (size) {
      case BaggageSize.s:
        return '–†–∞–∑–º–µ—Ä S (–ú–∞–ª—ã–π)';
      case BaggageSize.m:
        return '–†–∞–∑–º–µ—Ä M (–°—Ä–µ–¥–Ω–∏–π)';
      case BaggageSize.l:
        return '–†–∞–∑–º–µ—Ä L (–ë–æ–ª—å—à–æ–π)';
      case BaggageSize.custom:
        return '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π';
    }
  }

  String _getSizeDimensions(BaggageSize size) {
    switch (size) {
      case BaggageSize.s:
        return '30√ó40√ó20 —Å–º (–¥–æ 10 –∫–≥)';
      case BaggageSize.m:
        return '50√ó60√ó25 —Å–º (–¥–æ 20 –∫–≥)';
      case BaggageSize.l:
        return '70√ó80√ó30 —Å–º (–¥–æ 32 –∫–≥)';
      case BaggageSize.custom:
        return '–õ—é–±—ã–µ –≥–∞–±–∞—Ä–∏—Ç—ã';
    }
  }

  String _getSizeExamples(BaggageSize size) {
    switch (size) {
      case BaggageSize.s:
        return '–†—é–∫–∑–∞–∫, –Ω–µ–±–æ–ª—å—à–∞—è —Å—É–º–∫–∞';
      case BaggageSize.m:
        return '–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è —Å—É–º–∫–∞, —Å—Ä–µ–¥–Ω–∏–π —á–µ–º–æ–¥–∞–Ω';
      case BaggageSize.l:
        return '–ë–æ–ª—å—à–æ–π —á–µ–º–æ–¥–∞–Ω, –∫–æ—Ä–æ–±–∫–∞';
      case BaggageSize.custom:
        return '–ì–∏—Ç–∞—Ä–∞, –º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞, –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã';
    }
  }

  IconData _getSizeIcon(BaggageSize size) {
    switch (size) {
      case BaggageSize.s:
        return CupertinoIcons.bag;
      case BaggageSize.m:
        return CupertinoIcons.bag_fill;
      case BaggageSize.l:
        return CupertinoIcons.cube_box;
      case BaggageSize.custom:
        return CupertinoIcons.cube;
    }
  }

  Color _getSizeColor(BaggageSize size) {
    switch (size) {
      case BaggageSize.s:
        return CupertinoColors.activeGreen;
      case BaggageSize.m:
        return CupertinoColors.activeBlue;
      case BaggageSize.l:
        return CupertinoColors.systemOrange;
      case BaggageSize.custom:
        return CupertinoColors.systemPurple;
    }
  }
}
