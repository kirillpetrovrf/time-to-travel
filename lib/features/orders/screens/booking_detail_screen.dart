import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:url_launcher/url_launcher.dart';
import '../../../models/booking.dart';
import '../../../models/trip_type.dart';
import '../../../services/booking_service.dart';
import '../../../theme/theme_manager.dart';

class BookingDetailScreen extends StatefulWidget {
  final Booking booking;

  const BookingDetailScreen({super.key, required this.booking});

  @override
  State<BookingDetailScreen> createState() => _BookingDetailScreenState();
}

class _BookingDetailScreenState extends State<BookingDetailScreen> {
  late Booking _currentBooking;

  @override
  void initState() {
    super.initState();
    _currentBooking = widget.booking;
  }

  @override
  Widget build(BuildContext context) {
    final themeManager = context.themeManager;
    final theme = themeManager.currentTheme;

    return CupertinoPageScaffold(
      backgroundColor: theme.systemBackground,
      navigationBar: CupertinoNavigationBar(
        backgroundColor: theme.secondarySystemBackground,
        middle: Text(
          '–ó–∞–∫–∞–∑ #${_currentBooking.id.substring(0, 8)}',
          style: TextStyle(color: theme.label),
        ),
        leading: CupertinoButton(
          padding: EdgeInsets.zero,
          child: Icon(CupertinoIcons.back, color: theme.primary),
          onPressed: () => Navigator.of(context).pop('switch_to_orders'),
        ),
      ),
      child: SafeArea(
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              _buildStatusCard(theme),
              const SizedBox(height: 16),
              _buildTripInfoCard(theme),
              const SizedBox(height: 16),
              _buildPassengerInfoCard(theme),
              const SizedBox(height: 16),
              if (_currentBooking.baggage.isNotEmpty) ...[
                _buildBaggageCard(theme),
                const SizedBox(height: 16),
              ],
              if (_currentBooking.pets.isNotEmpty) ...[
                _buildPetsCard(theme),
                const SizedBox(height: 16),
              ],
              _buildPriceCard(theme),
              const SizedBox(height: 24),
              _buildActionButtons(theme),

              // –û—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
              const SizedBox(height: 60),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildStatusCard(theme) {
    final statusColor = _getStatusColor(theme);
    final statusText = _getStatusText();

    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: statusColor.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: statusColor.withOpacity(0.3)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Container(
                width: 12,
                height: 12,
                decoration: BoxDecoration(
                  color: statusColor,
                  shape: BoxShape.circle,
                ),
              ),
              const SizedBox(width: 8),
              Text(
                statusText,
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.w600,
                  color: statusColor,
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),
          Text(
            '–°–æ–∑–¥–∞–Ω: ${_formatDate(_currentBooking.createdAt)}',
            style: TextStyle(fontSize: 14, color: theme.secondaryLabel),
          ),
        ],
      ),
    );
  }

  Widget _buildTripInfoCard(theme) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: theme.secondarySystemBackground,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: theme.separator.withOpacity(0.2)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(CupertinoIcons.location, color: theme.primary),
              const SizedBox(width: 8),
              Text(
                '–ú–∞—Ä—à—Ä—É—Ç',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.w600,
                  color: theme.label,
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),
          _buildRouteInfo(theme),
          const SizedBox(height: 12),
          Divider(color: theme.separator.withOpacity(0.3)),
          const SizedBox(height: 12),
          _buildTripTypeInfo(theme),
          const SizedBox(height: 12),
          _buildDateTimeInfo(theme),
        ],
      ),
    );
  }

  Widget _buildRouteInfo(theme) {
    // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    print(
      'üîç BookingDetail: fromStop = ${_currentBooking.fromStop?.name}, toStop = ${_currentBooking.toStop?.name}',
    );

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
    final String directionText;
    if (_currentBooking.fromStop != null && _currentBooking.toStop != null) {
      directionText =
          '${_currentBooking.fromStop!.name} ‚Üí ${_currentBooking.toStop!.name}';
    } else {
      // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
      directionText = _currentBooking.direction == Direction.donetskToRostov
          ? '–î–æ–Ω–µ—Ü–∫ ‚Üí –†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É'
          : '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É ‚Üí –î–æ–Ω–µ—Ü–∫';
    }

    return Row(
      children: [
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                directionText,
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.w500,
                  color: theme.label,
                ),
              ),
              if (_currentBooking.pickupPoint != null) ...[
                const SizedBox(height: 4),
                Text(
                  '–ú–µ—Å—Ç–æ –ø–æ—Å–∞–¥–∫–∏: ${_currentBooking.pickupPoint}',
                  style: TextStyle(fontSize: 14, color: theme.secondaryLabel),
                ),
              ],
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildTripTypeInfo(theme) {
    final tripTypeText = _currentBooking.tripType == TripType.individual
        ? '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞'
        : '–ì—Ä—É–ø–ø–æ–≤–∞—è –ø–æ–µ–∑–¥–∫–∞';

    return Row(
      children: [
        Icon(
          _currentBooking.tripType == TripType.individual
              ? CupertinoIcons.car
              : CupertinoIcons.group,
          color: theme.primary,
          size: 16,
        ),
        const SizedBox(width: 8),
        Text(tripTypeText, style: TextStyle(fontSize: 16, color: theme.label)),
      ],
    );
  }

  Widget _buildDateTimeInfo(theme) {
    return Row(
      children: [
        Icon(CupertinoIcons.time, color: theme.primary, size: 16),
        const SizedBox(width: 8),
        Text(
          '${_formatDate(_currentBooking.departureDate)} –≤ ${_currentBooking.departureTime}',
          style: TextStyle(fontSize: 16, color: theme.label),
        ),
      ],
    );
  }

  Widget _buildPassengerInfoCard(theme) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: theme.secondarySystemBackground,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: theme.separator.withOpacity(0.2)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(CupertinoIcons.person_2, color: theme.primary),
              const SizedBox(width: 8),
              Text(
                '–ü–∞—Å—Å–∞–∂–∏—Ä—ã',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.w600,
                  color: theme.label,
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),
          Text(
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${_currentBooking.passengerCount} ${_getPassengerText(_currentBooking.passengerCount)}',
            style: TextStyle(fontSize: 16, color: theme.label),
          ),
        ],
      ),
    );
  }

  Widget _buildBaggageCard(theme) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: theme.secondarySystemBackground,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: theme.separator.withOpacity(0.2)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(CupertinoIcons.bag, color: theme.primary),
              const SizedBox(width: 8),
              Text(
                '–ë–∞–≥–∞–∂',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.w600,
                  color: theme.label,
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),
          ..._currentBooking.baggage.map((item) {
            return Padding(
              padding: const EdgeInsets.only(bottom: 8),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(
                    item.customDescription != null
                        ? '${item.size.name.toUpperCase()} - ${item.customDescription}'
                        : '${item.size.name.toUpperCase()} –±–∞–≥–∞–∂ (${item.quantity} —à—Ç.)',
                    style: TextStyle(fontSize: 16, color: theme.label),
                  ),
                  Text(
                    '+${item.calculateCost().toInt()} ‚ÇΩ',
                    style: TextStyle(
                      fontSize: 16,
                      color: theme.primary,
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                ],
              ),
            );
          }).toList(),
        ],
      ),
    );
  }

  Widget _buildPetsCard(theme) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: theme.secondarySystemBackground,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: theme.separator.withOpacity(0.2)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(CupertinoIcons.paw, color: theme.primary),
              const SizedBox(width: 8),
              Text(
                '–ñ–∏–≤–æ—Ç–Ω—ã–µ',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.w600,
                  color: theme.label,
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),
          ..._currentBooking.pets.map((pet) {
            return Padding(
              padding: const EdgeInsets.only(bottom: 8),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(
                    pet.customDescription != null
                        ? '${pet.breed} (${pet.size.name.toUpperCase()}) - ${pet.weight}–∫–≥ - ${pet.customDescription}'
                        : '${pet.breed} (${pet.size.name.toUpperCase()}) - ${pet.weight}–∫–≥',
                    style: TextStyle(fontSize: 16, color: theme.label),
                  ),
                  Text(
                    '+${pet.cost.toInt()} ‚ÇΩ',
                    style: TextStyle(
                      fontSize: 16,
                      color: theme.primary,
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                ],
              ),
            );
          }).toList(),
        ],
      ),
    );
  }

  Widget _buildPriceCard(theme) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: theme.primary.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: theme.primary.withOpacity(0.2)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(CupertinoIcons.money_dollar, color: theme.primary),
              const SizedBox(width: 8),
              Text(
                '–°—Ç–æ–∏–º–æ—Å—Ç—å',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.w600,
                  color: theme.label,
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                '–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.w600,
                  color: theme.label,
                ),
              ),
              Text(
                '${_currentBooking.totalPrice} ‚ÇΩ',
                style: TextStyle(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                  color: theme.primary,
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),
          Text(
            '–û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ—Å–∞–¥–∫–µ –≤ –∞–≤—Ç–æ–º–æ–±–∏–ª—å',
            style: TextStyle(fontSize: 14, color: theme.secondaryLabel),
          ),
        ],
      ),
    );
  }

  Widget _buildActionButtons(theme) {
    return Column(
      children: [
        // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å)
        if (_canCancelBooking()) ...[
          SizedBox(
            width: double.infinity,
            child: CupertinoButton(
              color: CupertinoColors.systemRed,
              onPressed: _showCancelDialog,
              child: const Text(
                '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑',
                style: TextStyle(color: CupertinoColors.white),
              ),
            ),
          ),
          const SizedBox(height: 12),
        ],

        // –ö–Ω–æ–ø–∫–∞ —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
        SizedBox(
          width: double.infinity,
          child: CupertinoButton(
            color: CupertinoColors.systemBlue,
            onPressed: _showContactOptions,
            child: Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: const [
                Icon(
                  CupertinoIcons.phone_fill,
                  color: CupertinoColors.white,
                  size: 20,
                ),
                SizedBox(width: 8),
                Text(
                  '–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π',
                  style: TextStyle(color: CupertinoColors.white),
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }

  Color _getStatusColor(theme) {
    switch (_currentBooking.status) {
      case BookingStatus.pending:
        return CupertinoColors.systemOrange;
      case BookingStatus.confirmed:
        return CupertinoColors.systemBlue;
      case BookingStatus.assigned:
        return CupertinoColors.systemPurple;
      case BookingStatus.inProgress:
        return CupertinoColors.systemGreen;
      case BookingStatus.completed:
        return CupertinoColors.systemGreen;
      case BookingStatus.cancelled:
        return CupertinoColors.systemRed;
    }
  }

  String _getStatusText() {
    switch (_currentBooking.status) {
      case BookingStatus.pending:
        return '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è';
      case BookingStatus.confirmed:
        return '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω';
      case BookingStatus.assigned:
        return '–ù–∞–∑–Ω–∞—á–µ–Ω –≤–æ–¥–∏—Ç–µ–ª—å';
      case BookingStatus.inProgress:
        return '–í –ø—É—Ç–∏';
      case BookingStatus.completed:
        return '–ó–∞–≤–µ—Ä—à–µ–Ω';
      case BookingStatus.cancelled:
        return '–û—Ç–º–µ–Ω–µ–Ω';
    }
  }

  bool _canCancelBooking() {
    return _currentBooking.status == BookingStatus.pending ||
        _currentBooking.status == BookingStatus.confirmed;
  }

  String _getPassengerText(int count) {
    if (count == 1) return '–ø–∞—Å—Å–∞–∂–∏—Ä';
    if (count < 5) return '–ø–∞—Å—Å–∞–∂–∏—Ä–∞';
    return '–ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤';
  }

  String _formatDate(DateTime date) {
    final months = [
      '—è–Ω–≤–∞—Ä—è',
      '—Ñ–µ–≤—Ä–∞–ª—è',
      '–º–∞—Ä—Ç–∞',
      '–∞–ø—Ä–µ–ª—è',
      '–º–∞—è',
      '–∏—é–Ω—è',
      '–∏—é–ª—è',
      '–∞–≤–≥—É—Å—Ç–∞',
      '—Å–µ–Ω—Ç—è–±—Ä—è',
      '–æ–∫—Ç—è–±—Ä—è',
      '–Ω–æ—è–±—Ä—è',
      '–¥–µ–∫–∞–±—Ä—è',
    ];
    return '${date.day} ${months[date.month - 1]} ${date.year}';
  }

  void _showCancelDialog() {
    showCupertinoDialog(
      context: context,
      builder: (context) => CupertinoAlertDialog(
        title: const Text('–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞'),
        content: const Text(
          '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑? '
          '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å.',
        ),
        actions: [
          CupertinoDialogAction(
            child: const Text('–û—Ç–º–µ–Ω–∞'),
            onPressed: () => Navigator.pop(context),
          ),
          CupertinoDialogAction(
            isDestructiveAction: true,
            child: const Text('–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑'),
            onPressed: () {
              Navigator.pop(context);
              _cancelBooking();
            },
          ),
        ],
      ),
    );
  }

  void _cancelBooking() async {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    final bool? shouldCancel = await showCupertinoDialog<bool>(
      context: context,
      builder: (context) => CupertinoAlertDialog(
        title: const Text('–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑'),
        content: const Text('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑?'),
        actions: [
          CupertinoDialogAction(
            child: const Text('–û—Ç–º–µ–Ω–∞'),
            onPressed: () => Navigator.pop(context, false),
          ),
          CupertinoDialogAction(
            isDestructiveAction: true,
            child: const Text('–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑'),
            onPressed: () => Navigator.pop(context, true),
          ),
        ],
      ),
    );

    if (shouldCancel == true) {
      try {
        // –û—Ç–º–µ–Ω—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        await BookingService().cancelBooking(_currentBooking.id);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setState(() {
          _currentBooking = Booking(
            id: _currentBooking.id,
            clientId: _currentBooking.clientId,
            tripType: _currentBooking.tripType,
            direction: _currentBooking.direction,
            departureDate: _currentBooking.departureDate,
            departureTime: _currentBooking.departureTime,
            passengerCount: _currentBooking.passengerCount,
            pickupPoint: _currentBooking.pickupPoint,
            pickupAddress: _currentBooking.pickupAddress,
            dropoffAddress: _currentBooking.dropoffAddress,
            totalPrice: _currentBooking.totalPrice,
            status: BookingStatus.cancelled, // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            createdAt: _currentBooking.createdAt,
            trackingPoints: _currentBooking.trackingPoints,
            baggage: _currentBooking.baggage,
            pets: _currentBooking.pets,
          );
        });

        if (mounted) {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
          showCupertinoDialog(
            context: context,
            builder: (context) => CupertinoAlertDialog(
              title: const Text('–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω'),
              content: const Text('–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω.'),
              actions: [
                CupertinoDialogAction(
                  child: const Text('OK'),
                  onPressed: () {
                    Navigator.pop(context); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
                    Navigator.pop(
                      context,
                      'cancelled',
                    ); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤
                  },
                ),
              ],
            ),
          );
        }
      } catch (e) {
        if (mounted) {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
          showCupertinoDialog(
            context: context,
            builder: (context) => CupertinoAlertDialog(
              title: const Text('–û—à–∏–±–∫–∞'),
              content: Text('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑: $e'),
              actions: [
                CupertinoDialogAction(
                  child: const Text('OK'),
                  onPressed: () => Navigator.pop(context),
                ),
              ],
            ),
          );
        }
      }
    }
  }

  void _showContactOptions() {
    showCupertinoModalPopup(
      context: context,
      builder: (BuildContext context) => CupertinoActionSheet(
        title: const Text('–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π'),
        message: const Text('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏'),
        actions: [
          CupertinoActionSheetAction(
            onPressed: () {
              Navigator.pop(context);
              _makePhoneCall();
            },
            child: Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: const [
                Icon(
                  CupertinoIcons.phone_fill,
                  color: CupertinoColors.activeBlue,
                ),
                SizedBox(width: 8),
                Text('–ü–æ–∑–≤–æ–Ω–∏—Ç—å +7 949 499 9329'),
              ],
            ),
          ),
          CupertinoActionSheetAction(
            onPressed: () {
              Navigator.pop(context);
              _openTelegram();
            },
            child: Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: const [
                Icon(
                  CupertinoIcons.chat_bubble_text_fill,
                  color: CupertinoColors.activeBlue,
                ),
                SizedBox(width: 8),
                Text('–ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram'),
              ],
            ),
          ),
        ],
        cancelButton: CupertinoActionSheetAction(
          isDefaultAction: true,
          onPressed: () {
            Navigator.pop(context);
          },
          child: const Text('–û—Ç–º–µ–Ω–∞'),
        ),
      ),
    );
  }

  Future<void> _makePhoneCall() async {
    final Uri phoneUrl = Uri.parse('tel:+79494999329');

    try {
      final bool canLaunch = await canLaunchUrl(phoneUrl);
      if (canLaunch) {
        final bool launched = await launchUrl(
          phoneUrl,
          mode: LaunchMode.externalApplication,
        );
        if (!launched && mounted) {
          _showPhoneErrorDialog();
        }
      } else {
        if (mounted) {
          _showPhoneErrorDialog();
        }
      }
    } catch (e) {
      if (mounted) {
        _showPhoneErrorDialog();
      }
    }
  }

  void _showPhoneErrorDialog() {
    showCupertinoDialog(
      context: context,
      builder: (context) => CupertinoAlertDialog(
        title: const Text('–¢–µ–ª–µ—Ñ–æ–Ω'),
        content: const Text('–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º:\n+7 949 499 9329'),
        actions: [
          CupertinoDialogAction(
            child: const Text('OK'),
            onPressed: () => Navigator.pop(context),
          ),
        ],
      ),
    );
  }

  Future<void> _openTelegram() async {
    final Uri telegramUrl = Uri.parse('https://t.me/Time_to_travel_dnr');

    try {
      final bool canLaunch = await canLaunchUrl(telegramUrl);
      if (canLaunch) {
        final bool launched = await launchUrl(
          telegramUrl,
          mode: LaunchMode.externalApplication,
        );
        if (!launched && mounted) {
          _showTelegramErrorDialog();
        }
      } else {
        if (mounted) {
          _showTelegramErrorDialog();
        }
      }
    } catch (e) {
      if (mounted) {
        _showTelegramErrorDialog();
      }
    }
  }

  void _showTelegramErrorDialog() {
    showCupertinoDialog(
      context: context,
      builder: (context) => CupertinoAlertDialog(
        title: const Text('Telegram'),
        content: const Text('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ Telegram:\n@Time_to_travel_dnr'),
        actions: [
          CupertinoDialogAction(
            child: const Text('OK'),
            onPressed: () => Navigator.pop(context),
          ),
        ],
      ),
    );
  }
}
