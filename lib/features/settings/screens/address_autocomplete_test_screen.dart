import 'package:flutter/cupertino.dart';
import '../../../theme/theme_manager.dart';
import '../../../theme/app_theme.dart';
import '../../../services/yandex_suggest_service_v2.dart';

/// –≠–∫—Ä–∞–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –æ—Ç–ª–∞–¥–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –≥–µ–æ—Å–∞–¥–∂–µ—Å—Ç–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç
class AddressAutocompleteTestScreen extends StatefulWidget {
  const AddressAutocompleteTestScreen({super.key});

  @override
  State<AddressAutocompleteTestScreen> createState() =>
      _AddressAutocompleteTestScreenState();
}

class _AddressAutocompleteTestScreenState
    extends State<AddressAutocompleteTestScreen> {
  final TextEditingController _fromController = TextEditingController();
  final TextEditingController _toController = TextEditingController();
  final FocusNode _fromFocusNode = FocusNode();
  final FocusNode _toFocusNode = FocusNode();

  // –°–µ—Ä–≤–∏—Å –Ø–Ω–¥–µ–∫—Å.–ì–µ–æ—Å–∞–¥–∂–µ—Å—Ç
  final YandexSuggestService _suggestService = YandexSuggestService();

  // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤
  List<SuggestItem> _fromSuggestions = [];
  List<SuggestItem> _toSuggestions = [];

  // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Å–∫–∞–∑–æ–∫
  bool _showFromSuggestions = false;
  bool _showToSuggestions = false;

  // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
  bool _isLoadingFromSuggestions = false;
  bool _isLoadingToSuggestions = false;

  @override
  void initState() {
    super.initState();

    // –ù–ï –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –∑–¥–µ—Å—å - –æ–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
    // _suggestService.initialize(); // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ!

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–æ–ª—è—Ö –≤–≤–æ–¥–∞
    _fromController.addListener(_onFromChanged);
    _toController.addListener(_onToChanged);

    // –°–ª—É—à–∞–µ–º —Ñ–æ–∫—É—Å
    _fromFocusNode.addListener(() {
      setState(() {
        _showFromSuggestions = _fromFocusNode.hasFocus;
      });
    });

    _toFocusNode.addListener(() {
      setState(() {
        _showToSuggestions = _toFocusNode.hasFocus;
      });
    });
  }

  @override
  void dispose() {
    _fromController.dispose();
    _toController.dispose();
    _fromFocusNode.dispose();
    _toFocusNode.dispose();
    // _suggestService –±–æ–ª—å—à–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç dispose - —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    super.dispose();
  }

  void _onFromChanged() async {
    final query = _fromController.text;
    print('üîç [FROM] –ò–∑–º–µ–Ω–µ–Ω–∏–µ: "$query"');

    if (query.isEmpty) {
      setState(() {
        _fromSuggestions = [];
        _showFromSuggestions = false;
        _isLoadingFromSuggestions = false;
      });
      return;
    }

    setState(() {
      _isLoadingFromSuggestions = true;
      _showFromSuggestions = true;
    });

    try {
      // –í—ã–∑–æ–≤ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –Ø–Ω–¥–µ–∫—Å.–ì–µ–æ—Å–∞–¥–∂–µ—Å—Ç
      final suggestions = await _suggestService.getSuggestions(query: query);

      setState(() {
        _fromSuggestions = suggestions;
        _isLoadingFromSuggestions = false;
      });

      print('‚úÖ [FROM] –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫: ${suggestions.length}');
    } catch (e) {
      print('‚ùå [FROM] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫: $e');
      setState(() {
        _fromSuggestions = [];
        _isLoadingFromSuggestions = false;
      });
    }
  }

  void _onToChanged() async {
    final query = _toController.text;
    print('üîç [TO] –ò–∑–º–µ–Ω–µ–Ω–∏–µ: "$query"');

    if (query.isEmpty) {
      setState(() {
        _toSuggestions = [];
        _showToSuggestions = false;
        _isLoadingToSuggestions = false;
      });
      return;
    }

    setState(() {
      _isLoadingToSuggestions = true;
      _showToSuggestions = true;
    });

    try {
      // –í—ã–∑–æ–≤ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –Ø–Ω–¥–µ–∫—Å.–ì–µ–æ—Å–∞–¥–∂–µ—Å—Ç
      final suggestions = await _suggestService.getSuggestions(query: query);

      setState(() {
        _toSuggestions = suggestions;
        _isLoadingToSuggestions = false;
      });

      print('‚úÖ [TO] –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫: ${suggestions.length}');
    } catch (e) {
      print('‚ùå [TO] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫: $e');
      setState(() {
        _toSuggestions = [];
        _isLoadingToSuggestions = false;
      });
    }
  }

  void _selectFromSuggestion(SuggestItem suggestion) {
    print('‚úÖ [FROM] –í—ã–±—Ä–∞–Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞: "${suggestion.displayText}"');
    setState(() {
      _fromController.text = suggestion.displayText;
      _showFromSuggestions = false;
    });
    _fromFocusNode.unfocus();
  }

  void _selectToSuggestion(SuggestItem suggestion) {
    print('‚úÖ [TO] –í—ã–±—Ä–∞–Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞: "${suggestion.displayText}"');
    setState(() {
      _toController.text = suggestion.displayText;
      _showToSuggestions = false;
    });
    _toFocusNode.unfocus();
  }

  @override
  Widget build(BuildContext context) {
    final themeManager = context.themeManager;
    final theme = themeManager.currentTheme;

    return CupertinoPageScaffold(
      backgroundColor: theme.systemBackground,
      navigationBar: CupertinoNavigationBar(
        backgroundColor: theme.secondarySystemBackground,
        middle: Text(
          '–ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤',
          style: TextStyle(color: theme.label),
        ),
        trailing: CupertinoButton(
          padding: EdgeInsets.zero,
          child: Icon(CupertinoIcons.info_circle, color: theme.primary),
          onPressed: () => _showInfoDialog(theme),
        ),
      ),
      child: SafeArea(
        child: GestureDetector(
          // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –ø–æ–ª–µ–π
          onTap: () {
            _fromFocusNode.unfocus();
            _toFocusNode.unfocus();
            setState(() {
              _showFromSuggestions = false;
              _showToSuggestions = false;
            });
          },
          child: SingleChildScrollView(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
                _buildInfoCard(theme),

                const SizedBox(height: 24),

                // –ü–æ–ª–µ "–û—Ç–∫—É–¥–∞"
                _buildSectionTitle('–û—Ç–∫—É–¥–∞', theme),
                _buildAddressFieldWithSuggestions(
                  controller: _fromController,
                  focusNode: _fromFocusNode,
                  placeholder: '–ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
                  icon: CupertinoIcons.location,
                  theme: theme,
                  suggestions: _fromSuggestions,
                  showSuggestions: _showFromSuggestions,
                  onSuggestionTap: _selectFromSuggestion,
                  isLoading: _isLoadingFromSuggestions,
                ),

                const SizedBox(height: 24),

                // –ü–æ–ª–µ "–ö—É–¥–∞"
                _buildSectionTitle('–ö—É–¥–∞', theme),
                _buildAddressFieldWithSuggestions(
                  controller: _toController,
                  focusNode: _toFocusNode,
                  placeholder: '–ê–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è',
                  icon: CupertinoIcons.location_solid,
                  theme: theme,
                  suggestions: _toSuggestions,
                  showSuggestions: _showToSuggestions,
                  onSuggestionTap: _selectToSuggestion,
                  isLoading: _isLoadingToSuggestions,
                ),

                const SizedBox(height: 24),

                // –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏
                CupertinoButton.filled(
                  child: const Text('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë'),
                  onPressed: () {
                    setState(() {
                      _fromController.clear();
                      _toController.clear();
                      _fromSuggestions = [];
                      _toSuggestions = [];
                      _showFromSuggestions = false;
                      _showToSuggestions = false;
                    });
                  },
                ),

                const SizedBox(height: 60), // –û—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildInfoCard(CustomTheme theme) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: CupertinoColors.systemBlue.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: CupertinoColors.systemBlue.withOpacity(0.3)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(
                CupertinoIcons.lab_flask,
                color: CupertinoColors.systemBlue,
                size: 24,
              ),
              const SizedBox(width: 12),
              Expanded(
                child: Text(
                  '–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º',
                  style: TextStyle(
                    color: theme.label,
                    fontSize: 18,
                    fontWeight: FontWeight.w600,
                  ),
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),
          Text(
            '–≠–∫—Ä–∞–Ω –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤.\n\n'
            'üîπ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –∞–¥—Ä–µ—Å\n'
            'üîπ –ü–æ–¥—Å–∫–∞–∑–∫–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ Yandex Geocoder API\n'
            'üîπ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞\n\n'
            '‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç\n'
            'üåê –û–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º - –¥–æ—Å—Ç—É–ø–Ω—ã –í–°–ï –≥–æ—Ä–æ–¥–∞ –†–æ—Å—Å–∏–∏',
            style: TextStyle(
              color: theme.secondaryLabel,
              fontSize: 14,
              height: 1.4,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSectionTitle(String title, CustomTheme theme) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 8),
      child: Text(
        title,
        style: TextStyle(
          fontSize: 16,
          fontWeight: FontWeight.w600,
          color: theme.label,
        ),
      ),
    );
  }

  Widget _buildAddressFieldWithSuggestions({
    required TextEditingController controller,
    required FocusNode focusNode,
    required String placeholder,
    required IconData icon,
    required CustomTheme theme,
    required List<SuggestItem> suggestions,
    required bool showSuggestions,
    required Function(SuggestItem) onSuggestionTap,
    required bool isLoading,
  }) {
    return Column(
      children: [
        // –ü–æ–ª–µ –≤–≤–æ–¥–∞
        Container(
          decoration: BoxDecoration(
            color: theme.secondarySystemBackground,
            borderRadius: BorderRadius.circular(12),
            border: Border.all(
              color: focusNode.hasFocus
                  ? theme.primary
                  : theme.separator.withOpacity(0.2),
              width: focusNode.hasFocus ? 2 : 1,
            ),
          ),
          child: CupertinoTextField(
            controller: controller,
            focusNode: focusNode,
            placeholder: placeholder,
            padding: const EdgeInsets.all(16),
            decoration: null,
            style: TextStyle(color: theme.label, fontSize: 16),
            placeholderStyle: TextStyle(
              color: theme.secondaryLabel.withOpacity(0.5),
            ),
            prefix: Padding(
              padding: const EdgeInsets.only(left: 16),
              child: Icon(icon, color: theme.primary, size: 20),
            ),
            suffix: controller.text.isNotEmpty
                ? CupertinoButton(
                    padding: EdgeInsets.zero,
                    minSize: 0,
                    child: Padding(
                      padding: const EdgeInsets.only(right: 16),
                      child: Icon(
                        CupertinoIcons.clear_circled_solid,
                        color: theme.secondaryLabel,
                        size: 20,
                      ),
                    ),
                    onPressed: () {
                      controller.clear();
                    },
                  )
                : null,
          ),
        ),

        // –°–ø–∏—Å–æ–∫ –ø–æ–¥—Å–∫–∞–∑–æ–∫
        if (showSuggestions) ...[
          const SizedBox(height: 8),
          Container(
            constraints: const BoxConstraints(maxHeight: 300),
            decoration: BoxDecoration(
              color: theme.secondarySystemBackground,
              borderRadius: BorderRadius.circular(12),
              border: Border.all(color: theme.separator.withOpacity(0.2)),
              boxShadow: [
                BoxShadow(
                  color: CupertinoColors.black.withOpacity(0.1),
                  blurRadius: 10,
                  offset: const Offset(0, 4),
                ),
              ],
            ),
            child: isLoading
                ? const Padding(
                    padding: EdgeInsets.all(16),
                    child: Center(child: CupertinoActivityIndicator()),
                  )
                : suggestions.isEmpty
                ? Padding(
                    padding: const EdgeInsets.all(16),
                    child: Center(
                      child: Text(
                        '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
                        style: TextStyle(
                          color: theme.secondaryLabel,
                          fontSize: 14,
                        ),
                      ),
                    ),
                  )
                : ListView.separated(
                    shrinkWrap: true,
                    padding: EdgeInsets.zero,
                    itemCount: suggestions.length,
                    separatorBuilder: (context, index) => Container(
                      height: 1,
                      color: theme.separator.withOpacity(0.2),
                    ),
                    itemBuilder: (context, index) {
                      final suggestion = suggestions[index];
                      return CupertinoButton(
                        padding: const EdgeInsets.symmetric(
                          horizontal: 16,
                          vertical: 12,
                        ),
                        onPressed: () => onSuggestionTap(suggestion),
                        child: Row(
                          children: [
                            Icon(
                              CupertinoIcons.location_fill,
                              color: theme.secondaryLabel,
                              size: 16,
                            ),
                            const SizedBox(width: 12),
                            Expanded(
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text(
                                    suggestion.title,
                                    style: TextStyle(
                                      color: theme.label,
                                      fontSize: 15,
                                      fontWeight: FontWeight.w500,
                                    ),
                                  ),
                                  if (suggestion.subtitle != null &&
                                      suggestion.subtitle!.isNotEmpty) ...[
                                    const SizedBox(height: 2),
                                    Text(
                                      suggestion.subtitle!,
                                      style: TextStyle(
                                        color: theme.secondaryLabel,
                                        fontSize: 13,
                                      ),
                                      maxLines: 1,
                                      overflow: TextOverflow.ellipsis,
                                    ),
                                  ],
                                ],
                              ),
                            ),
                            Icon(
                              CupertinoIcons.arrow_up_left,
                              color: theme.secondaryLabel,
                              size: 16,
                            ),
                          ],
                        ),
                      );
                    },
                  ),
          ),
        ],
      ],
    );
  }

  void _showInfoDialog(CustomTheme theme) {
    showCupertinoDialog(
      context: context,
      builder: (context) => CupertinoAlertDialog(
        title: const Text('–Ø–Ω–¥–µ–∫—Å.–ì–µ–æ—Å–∞–¥–∂–µ—Å—Ç'),
        content: const Text(
          '–ì–µ–æ—Å–∞–¥–∂–µ—Å—Ç - —ç—Ç–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª API –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–≤–æ–¥–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –∏ –∞–¥—Ä–µ—Å–æ–≤.\n\n'
          '–ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞ –∏ –ø–æ–º–æ–≥–∞—é—Ç –±—ã—Å—Ç—Ä–æ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–π –∞–¥—Ä–µ—Å.\n\n'
          '–ò—Å—Ç–æ—á–Ω–∏–∫: MapKit SDK –æ—Ç –Ø–Ω–¥–µ–∫—Å',
        ),
        actions: [
          CupertinoDialogAction(
            child: const Text('–ü–æ–Ω—è—Ç–Ω–æ'),
            onPressed: () => Navigator.of(context).pop(),
          ),
        ],
      ),
    );
  }
}
