import 'package:flutter/cupertino.dart';
import '../../../services/permission_service.dart';
import '../../../services/notification_service.dart';
import '../../../services/auth_service.dart';
import '../../../services/booking_service.dart';
import '../../../theme/theme_manager.dart';
import '../../notifications/screens/notifications_screen.dart';
import 'address_autocomplete_test_screen.dart';
import 'package:permission_handler/permission_handler.dart';

/// –≠–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class SettingsScreen extends StatefulWidget {
  const SettingsScreen({super.key});

  @override
  State<SettingsScreen> createState() => _SettingsScreenState();
}

class _SettingsScreenState extends State<SettingsScreen> {
  bool _locationEnabled = false;
  bool _locationPermission = false;
  bool _notificationPermission = false;
  bool _isLoading = true;
  int _pendingNotificationsCount = 0;

  @override
  void initState() {
    super.initState();
    _checkPermissions();
  }

  Future<void> _checkPermissions() async {
    setState(() => _isLoading = true);

    final permissionService = PermissionService.instance;

    final locationEnabled = await permissionService.isLocationEnabled();
    final locationPermission = await permissionService.hasLocationPermission();
    final notificationPermission = await permissionService
        .hasNotificationPermission();

    // –°—á–∏—Ç–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –∑–∞–∫–∞–∑–æ–≤
    final notificationsCount = await _getNotificationsCount();

    setState(() {
      _locationEnabled = locationEnabled;
      _locationPermission = locationPermission;
      _notificationPermission = notificationPermission;
      _pendingNotificationsCount = notificationsCount;
      _isLoading = false;
    });
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –ë–£–î–£–©–ò–ï)
  Future<int> _getNotificationsCount() async {
    try {
      final bookingService = BookingService();
      final bookings = await bookingService.getCurrentClientBookings();

      int count = 0;
      final now = DateTime.now();

      debugPrint('üîî [SETTINGS] –ü–æ–¥—Å—á–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
      debugPrint('üîî [SETTINGS] –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: $now');
      debugPrint('üîî [SETTINGS] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: ${bookings.length}');

      for (final booking in bookings) {
        // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        final timeParts = booking.departureTime.split(':');
        final departureDateTime = DateTime(
          booking.departureDate.year,
          booking.departureDate.month,
          booking.departureDate.day,
          int.parse(timeParts[0]),
          int.parse(timeParts[1]),
        );

        debugPrint('üîî [SETTINGS] --- –ó–∞–∫–∞–∑ #${booking.id} ---');
        debugPrint('üîî [SETTINGS]   –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: $departureDateTime');

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 1 –¥–µ–Ω—å (–≤ 9:00 —É—Ç—Ä–∞)
        final reminderDate = departureDateTime.subtract(
          const Duration(days: 1),
        );
        final notification24h = DateTime(
          reminderDate.year,
          reminderDate.month,
          reminderDate.day,
          9, // 9:00 —É—Ç—Ä–∞
          0,
        );

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ë–£–î–£–©–ï–ú
        if (notification24h.isAfter(now)) {
          count++;
          debugPrint(
            'üîî [SETTINGS]   ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 1 –¥–µ–Ω—å: $notification24h (–ë–£–î–£–©–ï–ï)',
          );
        } else {
          debugPrint(
            'üîî [SETTINGS]   ‚è±Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 1 –¥–µ–Ω—å: $notification24h (–ü–†–û–®–õ–û–ï - –Ω–µ —Å—á–∏—Ç–∞–µ–º)',
          );
        }

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 1 —á–∞—Å
        final notification1h = departureDateTime.subtract(
          const Duration(hours: 1),
        );

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ë–£–î–£–©–ï–ú
        if (notification1h.isAfter(now)) {
          count++;
          debugPrint(
            'üîî [SETTINGS]   ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 1 —á–∞—Å: $notification1h (–ë–£–î–£–©–ï–ï)',
          );
        } else {
          debugPrint(
            'üîî [SETTINGS]   ‚è±Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 1 —á–∞—Å: $notification1h (–ü–†–û–®–õ–û–ï - –Ω–µ —Å—á–∏—Ç–∞–µ–º)',
          );
        }
      }

      debugPrint('üîî [SETTINGS] ========================================');
      debugPrint('üîî [SETTINGS] –ò–¢–û–ì–û: $count –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
      debugPrint('üîî [SETTINGS] ========================================');

      return count;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á—ë—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: $e');
      return 0;
    }
  }

  Future<void> _requestLocationPermission() async {
    final permissionService = PermissionService.instance;
    final granted = await permissionService.requestLocationPermission();

    if (granted) {
      _showSuccessDialog('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–æ');
      await _checkPermissions();
    } else {
      _showPermissionDeniedDialog('–≥–µ–æ–ª–æ–∫–∞—Ü–∏—é');
    }
  }

  Future<void> _requestNotificationPermission() async {
    final permissionService = PermissionService.instance;
    final granted = await permissionService.requestNotificationPermission();

    if (granted) {
      _showSuccessDialog('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–æ');
      await _checkPermissions();
    } else {
      _showPermissionDeniedDialog('—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
    }
  }

  void _showSuccessDialog(String message) {
    showCupertinoDialog(
      context: context,
      builder: (context) => CupertinoAlertDialog(
        title: const Text('–£—Å–ø–µ—à–Ω–æ'),
        content: Text(message),
        actions: [
          CupertinoDialogAction(
            child: const Text('OK'),
            onPressed: () => Navigator.of(context).pop(),
          ),
        ],
      ),
    );
  }

  void _showPermissionDeniedDialog(String permissionName) {
    showCupertinoDialog(
      context: context,
      builder: (context) => CupertinoAlertDialog(
        title: const Text('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ'),
        content: Text(
          '–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ $permissionName.\n\n'
          '–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–¥–∞—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.',
        ),
        actions: [
          CupertinoDialogAction(
            child: const Text('–û—Ç–º–µ–Ω–∞'),
            onPressed: () => Navigator.of(context).pop(),
          ),
          CupertinoDialogAction(
            isDefaultAction: true,
            child: const Text('–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'),
            onPressed: () {
              Navigator.of(context).pop();
              openAppSettings();
            },
          ),
        ],
      ),
    );
  }

  /// –û—Ç–∫—Ä—ã—Ç—å —ç–∫—Ä–∞–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> _openNotificationsScreen() async {
    await Navigator.of(context).push(
      CupertinoPageRoute(builder: (context) => const NotificationsScreen()),
    );
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞
    await _checkPermissions();
  }

  /// –û—Ç–∫—Ä—ã—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤
  Future<void> _openAutocompleteTestScreen() async {
    await Navigator.of(context).push(
      CupertinoPageRoute(
        builder: (context) => const AddressAutocompleteTestScreen(),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final theme = CupertinoTheme.of(context);

    return CupertinoPageScaffold(
      navigationBar: CupertinoNavigationBar(
        middle: const Text('–ù–∞—Å—Ç—Ä–æ–π–∫–∏'),
        backgroundColor: theme.scaffoldBackgroundColor,
      ),
      child: SafeArea(
        child: _isLoading
            ? const Center(child: CupertinoActivityIndicator())
            : ListView(
                children: [
                  // –°–µ–∫—Ü–∏—è: –†–∞–∑—Ä–µ—à–µ–Ω–∏—è
                  _buildSectionHeader('–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'),
                  _buildPermissionTile(
                    icon: CupertinoIcons.location_fill,
                    title: '–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è',
                    subtitle: _getLocationStatusText(),
                    isEnabled: _locationPermission && _locationEnabled,
                    onTap: _locationPermission
                        ? () => openAppSettings()
                        : _requestLocationPermission,
                  ),
                  _buildPermissionTile(
                    icon: CupertinoIcons.bell_fill,
                    title: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                    subtitle: _notificationPermission
                        ? '–†–∞–∑—Ä–µ—à–µ–Ω–æ ‚Ä¢ $_pendingNotificationsCount –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ'
                        : '–ù–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ',
                    isEnabled: _notificationPermission,
                    onTap: _notificationPermission
                        ? () => _openNotificationsScreen()
                        : _requestNotificationPermission,
                  ),

                  const SizedBox(height: 20),

                  // –°–µ–∫—Ü–∏—è: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                  _buildSectionHeader('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'),
                  _buildTestNotificationTile(
                    icon: CupertinoIcons.timer,
                    title: '–¢–µ—Å—Ç: –°–µ–π—á–∞—Å',
                    subtitle: '–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ)',
                    onTap: () => _testNotificationNow(),
                  ),
                  _buildTestNotificationTile(
                    icon: CupertinoIcons.clock_fill,
                    title: '–¢–µ—Å—Ç: –ß–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥',
                    subtitle: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –≤–∫–ª—é—á–µ–Ω–Ω—ã–º',
                    onTap: () => _testNotification1Minute(),
                  ),
                  _buildTestNotificationTile(
                    icon: CupertinoIcons.moon_fill,
                    title: '–¢–µ—Å—Ç: –ß–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥',
                    subtitle: '–ó–∞–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è!',
                    onTap: () => _testNotification2Minutes(),
                  ),
                  _buildActionTile(
                    icon: CupertinoIcons.rocket_fill,
                    title: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ 3 —Ç–µ—Å—Ç–∞',
                    subtitle: '–°–µ–π—á–∞—Å, —á–µ—Ä–µ–∑ 5 –∏ 10 —Å–µ–∫—É–Ω–¥',
                    color: CupertinoColors.systemOrange,
                    onTap: () => _testAllNotifications(),
                  ),

                  const SizedBox(height: 20),

                  // –°–µ–∫—Ü–∏—è: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞
                  _buildSectionHeader('–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞'),
                  _buildActionTile(
                    icon: CupertinoIcons.location_north_line_fill,
                    title: '–ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤',
                    subtitle: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–æ—Å–∞–¥–∂–µ—Å—Ç–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç',
                    color: CupertinoColors.systemPurple,
                    onTap: () => _openAutocompleteTestScreen(),
                  ),

                  const SizedBox(height: 20),

                  // –°–µ–∫—Ü–∏—è: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                  _buildSectionHeader('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'),
                  _buildInfoTile(
                    icon: CupertinoIcons.info_circle_fill,
                    title: '–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
                    subtitle: 'Time to Travel v1.0.2',
                    onTap: () => _showAboutDialog(),
                  ),

                  const SizedBox(height: 40),

                  // –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
                  Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 16),
                    child: CupertinoButton.filled(
                      child: const Text('–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞'),
                      onPressed: () => _showLogoutDialog(),
                    ),
                  ),

                  const SizedBox(height: 20),
                ],
              ),
      ),
    );
  }

  Widget _buildSectionHeader(String title) {
    final themeManager = context.themeManager;
    final theme = themeManager.currentTheme;

    return Padding(
      padding: const EdgeInsets.fromLTRB(16, 20, 16, 8),
      child: Text(
        title.toUpperCase(),
        style: TextStyle(
          fontSize: 13,
          fontWeight: FontWeight.w600,
          color: theme.secondaryLabel.withOpacity(0.6),
        ),
      ),
    );
  }

  Widget _buildPermissionTile({
    required IconData icon,
    required String title,
    required String subtitle,
    required bool isEnabled,
    required VoidCallback onTap,
  }) {
    final themeManager = context.themeManager;
    final theme = themeManager.currentTheme;

    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),
      decoration: BoxDecoration(
        color: theme.secondarySystemBackground,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: theme.separator.withOpacity(0.2)),
      ),
      child: CupertinoListTile(
        leading: Icon(
          icon,
          color: isEnabled
              ? CupertinoColors.systemGreen
              : CupertinoColors.systemRed,
          size: 28,
        ),
        title: Text(title, style: TextStyle(color: theme.label)),
        subtitle: Text(
          subtitle,
          style: TextStyle(
            color: isEnabled
                ? CupertinoColors.systemGreen
                : CupertinoColors.systemRed,
            fontSize: 13,
          ),
        ),
        trailing: Icon(
          CupertinoIcons.chevron_forward,
          color: theme.secondaryLabel.withOpacity(0.5),
        ),
        onTap: onTap,
      ),
    );
  }

  Widget _buildActionTile({
    required IconData icon,
    required String title,
    required String subtitle,
    Color? color,
    required VoidCallback onTap,
  }) {
    final themeManager = context.themeManager;
    final theme = themeManager.currentTheme;

    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),
      decoration: BoxDecoration(
        color: theme.secondarySystemBackground,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: theme.separator.withOpacity(0.2)),
      ),
      child: CupertinoListTile(
        leading: Icon(
          icon,
          color: color ?? CupertinoColors.systemBlue,
          size: 28,
        ),
        title: Text(title, style: TextStyle(color: theme.label)),
        subtitle: Text(
          subtitle,
          style: TextStyle(color: theme.secondaryLabel, fontSize: 13),
        ),
        trailing: Icon(
          CupertinoIcons.chevron_forward,
          color: theme.secondaryLabel.withOpacity(0.5),
        ),
        onTap: onTap,
      ),
    );
  }

  Widget _buildTestNotificationTile({
    required IconData icon,
    required String title,
    required String subtitle,
    required VoidCallback onTap,
  }) {
    final themeManager = context.themeManager;
    final theme = themeManager.currentTheme;

    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),
      decoration: BoxDecoration(
        color: theme.secondarySystemBackground,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: theme.separator.withOpacity(0.2)),
      ),
      child: CupertinoListTile(
        leading: Icon(icon, color: CupertinoColors.systemPurple, size: 28),
        title: Text(title, style: TextStyle(color: theme.label)),
        subtitle: Text(
          subtitle,
          style: TextStyle(color: theme.secondaryLabel, fontSize: 13),
        ),
        trailing: Icon(
          CupertinoIcons.play_arrow_solid,
          color: CupertinoColors.systemPurple,
        ),
        onTap: onTap,
      ),
    );
  }

  Widget _buildInfoTile({
    required IconData icon,
    required String title,
    required String subtitle,
    required VoidCallback onTap,
  }) {
    final themeManager = context.themeManager;
    final theme = themeManager.currentTheme;

    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),
      decoration: BoxDecoration(
        color: theme.secondarySystemBackground,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: theme.separator.withOpacity(0.2)),
      ),
      child: CupertinoListTile(
        leading: Icon(icon, color: CupertinoColors.systemGrey, size: 28),
        title: Text(title, style: TextStyle(color: theme.label)),
        subtitle: Text(
          subtitle,
          style: TextStyle(color: theme.secondaryLabel, fontSize: 13),
        ),
        trailing: Icon(
          CupertinoIcons.chevron_forward,
          color: theme.secondaryLabel.withOpacity(0.5),
        ),
        onTap: onTap,
      ),
    );
  }

  Widget _buildThemeTile(ThemeManager themeManager) {
    final theme = themeManager.currentTheme;

    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),
      decoration: BoxDecoration(
        color: theme.secondarySystemBackground,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: theme.separator.withOpacity(0.2)),
      ),
      child: CupertinoListTile(
        leading: const Icon(
          CupertinoIcons.moon_fill,
          color: CupertinoColors.systemIndigo,
          size: 28,
        ),
        title: Text('–¢–µ–º–Ω–∞—è —Ç–µ–º–∞', style: TextStyle(color: theme.label)),
        subtitle: Text(
          'Time to Travel Dark (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)',
          style: TextStyle(color: theme.secondaryLabel, fontSize: 13),
        ),
        trailing: CupertinoSwitch(
          value: true, // –í—Å–µ–≥–¥–∞ —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞
          onChanged: null, // –û—Ç–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
        ),
      ),
    );
  }

  String _getLocationStatusText() {
    if (!_locationEnabled) {
      return '–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ';
    } else if (_locationPermission) {
      return '–†–∞–∑—Ä–µ—à–µ–Ω–æ';
    } else {
      return '–ù–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ';
    }
  }

  void _showAboutDialog() {
    showCupertinoDialog(
      context: context,
      builder: (context) => CupertinoAlertDialog(
        title: const Text('Time to Travel'),
        content: const Text(
          '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–∑–æ–∫\n\n'
          '–í–µ—Ä—Å–∏—è: 1.0.2 (build 3)\n\n'
          '¬© 2024 Time to Travel',
        ),
        actions: [
          CupertinoDialogAction(
            child: const Text('OK'),
            onPressed: () => Navigator.of(context).pop(),
          ),
        ],
      ),
    );
  }

  // –¢–µ—Å—Ç–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> _testNotificationNow() async {
    await NotificationService.instance.sendTestNotificationNow();
    if (mounted) {
      showCupertinoDialog(
        context: context,
        builder: (context) => CupertinoAlertDialog(
          title: const Text('‚úÖ –¢–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω'),
          content: const Text('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!'),
          actions: [
            CupertinoDialogAction(
              child: const Text('OK'),
              onPressed: () => Navigator.of(context).pop(),
            ),
          ],
        ),
      );
    }
  }

  Future<void> _testNotification1Minute() async {
    await NotificationService.instance.sendTestNotification1MinuteAppOn();
    if (mounted) {
      showCupertinoDialog(
        context: context,
        builder: (context) => CupertinoAlertDialog(
          title: const Text('‚è±Ô∏è –¢–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω'),
          content: const Text(
            '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥.\n\n'
            '–û—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–º.',
          ),
          actions: [
            CupertinoDialogAction(
              child: const Text('OK'),
              onPressed: () => Navigator.of(context).pop(),
            ),
          ],
        ),
      );
    }
  }

  Future<void> _testNotification2Minutes() async {
    await NotificationService.instance.sendTestNotification2MinuteAppOff();
    if (mounted) {
      showCupertinoDialog(
        context: context,
        builder: (context) => CupertinoAlertDialog(
          title: const Text('üåô –¢–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω'),
          content: const Text(
            '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥.\n\n'
            '‚ö†Ô∏è –ó–ê–ö–†–û–ô–¢–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï –°–ï–ô–ß–ê–°!\n\n'
            '–ù–∞–∂–º–∏—Ç–µ –û–ö –∏ –∑–∞–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.',
          ),
          actions: [
            CupertinoDialogAction(
              isDefaultAction: true,
              child: const Text('OK, –∑–∞–∫—Ä—ã–≤–∞—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'),
              onPressed: () => Navigator.of(context).pop(),
            ),
          ],
        ),
      );
    }
  }

  Future<void> _testAllNotifications() async {
    await NotificationService.instance.sendAllTestNotifications();
    if (mounted) {
      showCupertinoDialog(
        context: context,
        builder: (context) => CupertinoAlertDialog(
          title: const Text('üöÄ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã!'),
          content: const Text(
            '1Ô∏è‚É£ –°–µ–π—á–∞—Å - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\n'
            '2Ô∏è‚É£ –ß–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ (–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ)\n'
            '3Ô∏è‚É£ –ß–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ (–ó–ê–ö–†–û–ô–¢–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï!)\n\n'
            '–ù–∞–∂–º–∏—Ç–µ –û–ö –∏ –∑–∞–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.',
          ),
          actions: [
            CupertinoDialogAction(
              isDefaultAction: true,
              child: const Text('OK'),
              onPressed: () => Navigator.of(context).pop(),
            ),
          ],
        ),
      );
    }
  }

  void _showLogoutDialog() {
    showCupertinoDialog(
      context: context,
      builder: (context) => CupertinoAlertDialog(
        title: const Text('–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞?'),
        content: const Text('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?'),
        actions: [
          CupertinoDialogAction(
            child: const Text('–û—Ç–º–µ–Ω–∞'),
            onPressed: () => Navigator.of(context).pop(),
          ),
          CupertinoDialogAction(
            isDestructiveAction: true,
            child: const Text('–í—ã–π—Ç–∏'),
            onPressed: () async {
              Navigator.of(context).pop();
              await AuthService.instance.logout();
              if (mounted) {
                Navigator.of(
                  context,
                ).pushNamedAndRemoveUntil('/auth', (route) => false);
              }
            },
          ),
        ],
      ),
    );
  }
}
